<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ProjectHub - Real-time Team Collaboration</title>
    <style>
        :root {
            --primary-color: #A82400;
            --primary-dark: #8A1E00;
            --secondary-color: #D63A0D;
            --accent-color: #FFEBCD;
            --bg-color: #FFEBCD;
            --card-bg: #FFF5E6;
            --hover-bg: #FFE4CC;
            --text-primary: #A82400;
            --text-secondary: #6B4423;
            --text-dark: #3A2317;
            --white: #FFFFFF;
            --gray-50: #FAFAFA;
            --gray-100: #F5F5F5;
            --gray-200: #E5E5E5;
            --gray-300: #D4D4D4;
            --gray-600: #525252;
            --gray-800: #262626;
            --success: #10B981;
            --warning: #F59E0B;
            --error: #DC2626;
            --online: #10B981;
            --away: #F59E0B;
            --busy: #DC2626;
            --offline: #9CA3AF;
            --shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.07), 0 1px 3px rgba(0,0,0,0.06);
            --shadow-lg: 0 10px 15px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05);
            --shadow-xl: 0 20px 25px rgba(0,0,0,0.1), 0 10px 10px rgba(0,0,0,0.04);
            --border-radius: 16px;
            --border-radius-sm: 12px;
            --border-radius-xs: 8px;
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, var(--bg-color) 0%, #FFF8E1 100%);
            color: var(--text-dark);
            height: 100vh;
            overflow: hidden;
            line-height: 1.6;
        }

        /* Professional Header */
        .header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            color: var(--white);
            padding: 20px 32px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: var(--shadow-lg);
            position: relative;
            z-index: 1000;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05));
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 24px;
            position: relative;
            z-index: 1;
        }

        .logo {
            font-size: 28px;
            font-weight: 800;
            letter-spacing: -0.02em;
        }

        .project-selector {
            display: flex;
            align-items: center;
            gap: 12px;
            background: rgba(255,255,255,0.15);
            padding: 12px 20px;
            border-radius: var(--border-radius-sm);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .project-info h3 {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 2px;
        }

        .project-info p {
            font-size: 13px;
            opacity: 0.8;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 16px;
            position: relative;
            z-index: 1;
        }

        .call-status-header {
            display: none;
            align-items: center;
            gap: 8px;
            background: rgba(16, 185, 129, 0.2);
            padding: 8px 16px;
            border-radius: var(--border-radius-xs);
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .call-status-header.active {
            display: flex;
        }

        .recording-indicator-header {
            display: none;
            align-items: center;
            gap: 8px;
            background: rgba(220, 38, 38, 0.2);
            padding: 8px 16px;
            border-radius: var(--border-radius-xs);
            border: 1px solid rgba(220, 38, 38, 0.3);
            animation: pulse 2s infinite;
        }

        .recording-indicator-header.active {
            display: flex;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: var(--border-radius-sm);
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: rgba(255,255,255,0.15);
            color: var(--white);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .btn-primary:hover {
            background: rgba(255,255,255,0.25);
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: transparent;
            color: var(--white);
            border: 1px solid rgba(255,255,255,0.3);
        }

        .btn-secondary:hover {
            background: rgba(255,255,255,0.1);
        }

        /* Modern Layout */
        .main-layout {
            display: grid;
            grid-template-columns: 280px 1fr 360px;
            grid-template-rows: 1fr;
            height: calc(100vh - 84px);
            gap: 0;
        }

        /* Left Sidebar - Team & Navigation */
        .left-sidebar {
            background: linear-gradient(180deg, var(--white) 0%, var(--card-bg) 100%);
            border-right: 1px solid rgba(168, 36, 0, 0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .sidebar-header {
            padding: 24px;
            border-bottom: 1px solid rgba(168, 36, 0, 0.1);
        }

        .sidebar-header h3 {
            color: var(--text-primary);
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 4px;
        }

        .sidebar-header p {
            color: var(--text-secondary);
            font-size: 14px;
            opacity: 0.8;
        }

        /* Team Members Section */
        .team-members {
            flex: 1;
            padding: 24px;
            overflow-y: auto;
        }

        .team-member {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 16px 20px;
            margin-bottom: 8px;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            border: 2px solid transparent;
        }

        .team-member:hover {
            background: linear-gradient(135deg, var(--hover-bg) 0%, rgba(255,228,204,0.3) 100%);
            border-color: rgba(168, 36, 0, 0.2);
            transform: translateX(4px);
        }

        .team-member.in-call {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(16, 185, 129, 0.05) 100%);
            border-color: var(--success);
        }

        .member-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            color: var(--white);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            font-weight: 700;
            position: relative;
            border: 3px solid var(--white);
            box-shadow: var(--shadow-sm);
        }

        .status-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 14px;
            height: 14px;
            border-radius: 50%;
            border: 3px solid var(--white);
            background: var(--offline);
        }

        .status-indicator.online { background: var(--online); }
        .status-indicator.away { background: var(--away); }
        .status-indicator.busy { background: var(--busy); }
        .status-indicator.in-call { 
            background: var(--primary-color);
            animation: pulse 2s infinite;
        }

        .member-info {
            flex: 1;
        }

        .member-name {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 15px;
            margin-bottom: 2px;
        }

        .member-status {
            font-size: 13px;
            color: var(--text-secondary);
            opacity: 0.8;
        }

        .member-actions {
            display: flex;
            gap: 8px;
            opacity: 0;
            transition: var(--transition);
        }

        .team-member:hover .member-actions {
            opacity: 1;
        }

        .action-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border: none;
            background: var(--gray-100);
            color: var(--text-secondary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
            font-size: 14px;
        }

        .action-btn:hover {
            background: var(--primary-color);
            color: var(--white);
            transform: scale(1.1);
        }

        .action-btn.calling {
            background: var(--success);
            color: var(--white);
            animation: pulse 1s infinite;
        }

        /* Main Content Area */
        .main-content {
            display: flex;
            flex-direction: column;
            background: var(--white);
            position: relative;
        }

        /* Video Conference Area */
        .video-conference {
            height: 45%;
            background: linear-gradient(135deg, #1F2937 0%, #111827 100%);
            position: relative;
            display: flex;
            border-bottom: 1px solid var(--gray-200);
        }

        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
            padding: 20px;
            width: 100%;
            height: 100%;
        }

        .video-participant {
            background: #374151;
            border-radius: var(--border-radius);
            position: relative;
            overflow: hidden;
            min-height: 150px;
            border: 2px solid transparent;
            transition: var(--transition);
        }

        .video-participant.speaking {
            border-color: var(--success);
            box-shadow: 0 0 20px rgba(16, 185, 129, 0.3);
        }

        .video-participant.local {
            border-color: var(--primary-color);
        }

        .video-element {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: calc(var(--border-radius) - 2px);
        }

        .participant-overlay {
            position: absolute;
            bottom: 12px;
            left: 12px;
            right: 12px;
            background: rgba(0,0,0,0.7);
            color: var(--white);
            padding: 8px 12px;
            border-radius: var(--border-radius-xs);
            display: flex;
            align-items: center;
            justify-content: space-between;
            backdrop-filter: blur(10px);
        }

        .participant-name {
            font-size: 13px;
            font-weight: 600;
        }

        .participant-controls {
            display: flex;
            gap: 6px;
        }

        .participant-control {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
        }

        .participant-control.muted {
            background: var(--error);
            color: var(--white);
        }

        .participant-control.video-off {
            background: var(--warning);
            color: var(--white);
        }

        .video-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: var(--white);
            text-align: center;
        }

        .video-placeholder-icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.6;
        }

        .video-placeholder h3 {
            font-size: 20px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .video-placeholder p {
            opacity: 0.7;
            font-size: 14px;
        }

        /* Video Controls */
        .video-controls {
            position: absolute;
            bottom: 24px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 16px;
            background: rgba(0,0,0,0.8);
            padding: 16px 24px;
            border-radius: 50px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
        }

        .video-control-btn {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            border: none;
            background: rgba(255,255,255,0.15);
            color: var(--white);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            transition: var(--transition);
            position: relative;
        }

        .video-control-btn:hover {
            background: rgba(255,255,255,0.25);
            transform: scale(1.1);
        }

        .video-control-btn.active {
            background: var(--primary-color);
        }

        .video-control-btn.muted {
            background: var(--error);
        }

        .video-control-btn.end-call {
            background: var(--error);
        }

        .video-control-btn.end-call:hover {
            background: #B91C1C;
        }

        /* Chat & Collaboration */
        .chat-collaboration {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 24px;
            background: linear-gradient(180deg, var(--white) 0%, var(--gray-50) 100%);
        }

        .chat-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--gray-200);
        }

        .chat-title {
            font-size: 20px;
            font-weight: 700;
            color: var(--text-primary);
        }

        .chat-options {
            display: flex;
            gap: 12px;
        }

        .chat-option-btn {
            padding: 8px 16px;
            border: 1px solid var(--gray-300);
            background: var(--white);
            border-radius: var(--border-radius-xs);
            cursor: pointer;
            font-size: 13px;
            color: var(--text-secondary);
            transition: var(--transition);
        }

        .chat-option-btn:hover {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        /* Real-time Chat Messages */
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: var(--gray-50);
            border-radius: var(--border-radius);
            margin-bottom: 20px;
            border: 1px solid var(--gray-200);
            max-height: 400px;
        }

        .message {
            display: flex;
            gap: 12px;
            margin-bottom: 20px;
            animation: slideInMessage 0.3s ease;
        }

        .message.own {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: 600;
            flex-shrink: 0;
            border: 2px solid var(--white);
            box-shadow: var(--shadow-sm);
        }

        .message-content {
            flex: 1;
            max-width: 70%;
        }

        .message-bubble {
            background: var(--white);
            padding: 12px 16px;
            border-radius: 18px 18px 18px 4px;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            position: relative;
        }

        .message.own .message-bubble {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border-radius: 18px 18px 4px 18px;
        }

        .message-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 6px;
        }

        .message-author {
            font-size: 13px;
            font-weight: 600;
            color: var(--text-primary);
        }

        .message.own .message-author {
            color: rgba(255,255,255,0.9);
        }

        .message-time {
            font-size: 11px;
            color: var(--text-secondary);
            opacity: 0.7;
        }

        .message.own .message-time {
            color: rgba(255,255,255,0.7);
        }

        .message-text {
            font-size: 14px;
            line-height: 1.5;
            word-wrap: break-word;
        }

        .typing-indicator {
            display: none;
            align-items: center;
            gap: 12px;
            padding: 12px 20px;
            color: var(--text-secondary);
            font-style: italic;
            animation: slideInMessage 0.3s ease;
        }

        .typing-indicator.show {
            display: flex;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: var(--primary-color);
            animation: typingAnimation 1.4s infinite;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        /* Message Input */
        .message-input-area {
            background: var(--white);
            border-radius: var(--border-radius);
            padding: 20px;
            border: 1px solid var(--gray-200);
            box-shadow: var(--shadow-sm);
        }

        .message-input-container {
            display: flex;
            gap: 12px;
            align-items: flex-end;
        }

        .message-input {
            flex: 1;
            min-height: 44px;
            max-height: 120px;
            padding: 12px 16px;
            border: 2px solid var(--gray-200);
            border-radius: 22px;
            font-size: 14px;
            font-family: inherit;
            resize: none;
            outline: none;
            transition: var(--transition);
            background: var(--gray-50);
        }

        .message-input:focus {
            border-color: var(--primary-color);
            background: var(--white);
            box-shadow: 0 0 0 4px rgba(168, 36, 0, 0.1);
        }

        .send-button {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            border: none;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            transition: var(--transition);
            box-shadow: var(--shadow-sm);
        }

        .send-button:hover {
            transform: scale(1.05);
            box-shadow: var(--shadow-md);
        }

        .send-button:disabled {
            background: var(--gray-300);
            cursor: not-allowed;
            transform: none;
        }

        .message-actions {
            display: flex;
            gap: 8px;
            margin-top: 12px;
            padding-top: 12px;
            border-top: 1px solid var(--gray-200);
        }

        .message-action-btn {
            padding: 6px 12px;
            border: 1px solid var(--gray-300);
            background: var(--gray-50);
            border-radius: var(--border-radius-xs);
            cursor: pointer;
            font-size: 12px;
            color: var(--text-secondary);
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .message-action-btn:hover {
            border-color: var(--primary-color);
            color: var(--primary-color);
            background: var(--white);
        }

        /* Right Sidebar - Tools & Files */
        .right-sidebar {
            background: linear-gradient(180deg, var(--white) 0%, var(--card-bg) 100%);
            border-left: 1px solid rgba(168, 36, 0, 0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .sidebar-tabs {
            display: flex;
            border-bottom: 1px solid var(--gray-200);
            background: var(--white);
        }

        .sidebar-tab {
            flex: 1;
            padding: 16px 12px;
            border: none;
            background: transparent;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 13px;
            font-weight: 600;
            transition: var(--transition);
            border-bottom: 3px solid transparent;
        }

        .sidebar-tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
            background: var(--gray-50);
        }

        .sidebar-content {
            flex: 1;
            overflow: hidden;
        }

        .tab-panel {
            height: 100%;
            overflow-y: auto;
            padding: 24px;
            display: none;
        }

        .tab-panel.active {
            display: block;
        }

        /* Files Section */
        .file-upload-area {
            border: 2px dashed var(--gray-300);
            border-radius: var(--border-radius);
            padding: 24px;
            text-align: center;
            margin-bottom: 24px;
            cursor: pointer;
            transition: var(--transition);
            background: var(--gray-50);
        }

        .file-upload-area:hover {
            border-color: var(--primary-color);
            background: var(--hover-bg);
        }

        .file-upload-area.dragover {
            border-color: var(--primary-color);
            background: rgba(168, 36, 0, 0.05);
        }

        .file-list {
            space-y: 8px;
        }

        .file-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            background: var(--white);
            border-radius: var(--border-radius-sm);
            border: 1px solid var(--gray-200);
            cursor: pointer;
            transition: var(--transition);
            margin-bottom: 8px;
        }

        .file-item:hover {
            border-color: var(--primary-color);
            box-shadow: var(--shadow-sm);
        }

        .file-icon {
            width: 32px;
            height: 32px;
            border-radius: var(--border-radius-xs);
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
        }

        .file-info {
            flex: 1;
        }

        .file-name {
            font-size: 13px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 2px;
        }

        .file-size {
            font-size: 11px;
            color: var(--text-secondary);
            opacity: 0.8;
        }

        /* Animations */
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.05); opacity: 0.8; }
        }

        @keyframes slideInMessage {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes typingAnimation {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-8px); }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .main-layout {
                grid-template-columns: 1fr;
                grid-template-rows: 1fr;
            }
            
            .left-sidebar,
            .right-sidebar {
                display: none;
            }
        }

        @media (max-width: 768px) {
            .header {
                padding: 16px 20px;
            }
            
            .video-conference {
                height: 35%;
            }
            
            .video-grid {
                padding: 12px;
                gap: 8px;
            }
            
            .chat-collaboration {
                padding: 16px;
            }
        }

        /* Connection Status */
        .connection-status {
            position: fixed;
            top: 100px;
            right: 24px;
            padding: 12px 20px;
            border-radius: var(--border-radius-sm);
            font-size: 13px;
            font-weight: 600;
            z-index: 10000;
            transition: var(--transition);
            box-shadow: var(--shadow-lg);
        }

        .connection-status.connected {
            background: var(--success);
            color: var(--white);
        }

        .connection-status.connecting {
            background: var(--warning);
            color: var(--white);
        }

        .connection-status.disconnected {
            background: var(--error);
            color: var(--white);
        }

        /* Notification System */
        .notification {
            position: fixed;
            top: 120px;
            right: 24px;
            background: var(--white);
            padding: 16px 20px;
            border-radius: var(--border-radius-sm);
            box-shadow: var(--shadow-xl);
            border-left: 4px solid var(--primary-color);
            z-index: 10000;
            animation: slideInRight 0.3s ease, fadeOutRight 0.3s ease 4s;
            max-width: 320px;
        }

        .notification.success { border-left-color: var(--success); }
        .notification.error { border-left-color: var(--error); }
        .notification.warning { border-left-color: var(--warning); }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes fadeOutRight {
            to { transform: translateX(100%); opacity: 0; }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <div class="logo">ProjectHub</div>
            <div class="project-selector">
                <div class="project-info">
                    <h3>Mobile App Redesign</h3>
                    <p>5 team members • Active project</p>
                </div>
            </div>
        </div>
        
        <div class="header-right">
            <div class="call-status-header" id="callStatusHeader">
                <span>🔴</span>
                <span id="callDuration">00:00</span>
            </div>
            
            <div class="recording-indicator-header" id="recordingHeader">
                <span>⏺️</span>
                <span>Recording</span>
            </div>
            
            <button class="btn btn-secondary" onclick="toggleRecording()">
                <span>🎥</span> Record
            </button>
            
            <button class="btn btn-primary" onclick="inviteTeamMember()">
                <span>👥</span> Invite
            </button>
        </div>
    </header>

    <!-- Main Layout -->
    <div class="main-layout">
        <!-- Left Sidebar - Team Members -->
        <aside class="left-sidebar">
            <div class="sidebar-header">
                <h3>Team Members</h3>
                <p>Click to start video/voice call</p>
            </div>
            
            <div class="team-members" id="teamMembers">
                <!-- Team members will be populated by JavaScript -->
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Video Conference Area -->
            <div class="video-conference">
                <div class="video-grid" id="videoGrid">
                    <div class="video-participant local" id="localParticipant">
                        <div class="video-placeholder">
                            <div class="video-placeholder-icon">🎥</div>
                            <h3>Ready to Connect</h3>
                            <p>Click on a team member to start a call</p>
                        </div>
                        <video id="localVideo" class="video-element" autoplay muted style="display: none;"></video>
                        <div class="participant-overlay" style="display: none;">
                            <span class="participant-name">You</span>
                            <div class="participant-controls">
                                <div class="participant-control" id="localMuteIndicator">🎤</div>
                                <div class="participant-control" id="localVideoIndicator">📹</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="video-controls" id="videoControls" style="display: none;">
                    <button class="video-control-btn" id="muteBtn" onclick="toggleMute()" title="Toggle Microphone">
                        🎤
                    </button>
                    <button class="video-control-btn" id="videoBtn" onclick="toggleVideo()" title="Toggle Camera">
                        📹
                    </button>
                    <button class="video-control-btn" id="screenShareBtn" onclick="toggleScreenShare()" title="Share Screen">
                        🖥️
                    </button>
                    <button class="video-control-btn end-call" id="endCallBtn" onclick="endCall()" title="End Call">
                        📞
                    </button>
                </div>
            </div>

            <!-- Chat & Collaboration -->
            <div class="chat-collaboration">
                <div class="chat-header">
                    <h2 class="chat-title">Team Chat</h2>
                    <div class="chat-options">
                        <button class="chat-option-btn" onclick="clearChat()">🗑️ Clear</button>
                        <button class="chat-option-btn" onclick="exportChat()">📤 Export</button>
                    </div>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    <!-- Messages will be added dynamically -->
                </div>
                
                <div class="typing-indicator" id="typingIndicator">
                    <span id="typingUser">Someone</span> is typing
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
                
                <div class="message-input-area">
                    <div class="message-input-container">
                        <textarea 
                            id="messageInput" 
                            class="message-input" 
                            placeholder="Type your message..." 
                            rows="1"
                            maxlength="1000"
                        ></textarea>
                        <button class="send-button" id="sendButton" onclick="sendMessage()" disabled>
                            ➤
                        </button>
                    </div>
                    
                    <div class="message-actions">
                        <button class="message-action-btn" onclick="attachFile()">
                            📎 Attach File
                        </button>
                        <button class="message-action-btn" onclick="addEmoji()">
                            😊 Emoji
                        </button>
                        <button class="message-action-btn" onclick="mentionTeamMember()">
                            @ Mention
                        </button>
                    </div>
                </div>
            </div>
        </main>

        <!-- Right Sidebar - Tools & Files -->
        <aside class="right-sidebar">
            <div class="sidebar-tabs">
                <button class="sidebar-tab active" onclick="switchSidebarTab('files')">📁 Files</button>
                <button class="sidebar-tab" onclick="switchSidebarTab('notes')">📝 Notes</button>
                <button class="sidebar-tab" onclick="switchSidebarTab('tasks')">✅ Tasks</button>
            </div>
            
            <div class="sidebar-content">
                <!-- Files Tab -->
                <div class="tab-panel active" id="filesPanel">
                    <div class="file-upload-area" id="fileUploadArea" onclick="triggerFileUpload()">
                        <div>📁</div>
                        <p><strong>Drop files here</strong> or click to upload</p>
                        <input type="file" id="fileInput" multiple style="display: none;">
                    </div>
                    
                    <div class="file-list" id="fileList">
                        <!-- Files will be added dynamically -->
                    </div>
                </div>
                
                <!-- Notes Tab -->
                <div class="tab-panel" id="notesPanel">
                    <textarea 
                        id="notesTextarea" 
                        placeholder="Take meeting notes..."
                        style="width: 100%; height: 300px; padding: 16px; border: 1px solid var(--gray-200); border-radius: var(--border-radius-sm); resize: none; font-family: inherit;"
                    ></textarea>
                    <div style="margin-top: 12px; display: flex; gap: 8px;">
                        <button class="btn btn-primary" onclick="saveNotes()">💾 Save</button>
                        <button class="btn btn-secondary" onclick="exportNotes()">📤 Export</button>
                    </div>
                </div>
                
                <!-- Tasks Tab -->
                <div class="tab-panel" id="tasksPanel">
                    <div style="text-align: center; padding: 40px 20px; color: var(--text-secondary);">
                        <div style="font-size: 48px; margin-bottom: 16px;">✅</div>
                        <h3>Task Management</h3>
                        <p>Coming soon - Kanban board integration</p>
                    </div>
                </div>
            </div>
        </aside>
    </div>

    <!-- Connection Status -->
    <div class="connection-status connected" id="connectionStatus">
        🟢 Connected
    </div>

    <script>
        // Real-time Application State
        const AppState = {
            currentUser: {
                id: 'user-1',
                name: 'You',
                avatar: 'YU',
                status: 'online'
            },
            
            teamMembers: [
                {
                    id: 'user-2',
                    name: 'Alice Smith',
                    avatar: 'AS',
                    role: 'UX Designer',
                    status: 'online',
                    isInCall: false,
                    stream: null
                },
                {
                    id: 'user-3',
                    name: 'Mike Johnson',
                    avatar: 'MJ',
                    role: 'Developer',
                    status: 'away',
                    isInCall: false,
                    stream: null
                },
                {
                    id: 'user-4',
                    name: 'Sarah Parker',
                    avatar: 'SP',
                    role: 'QA Engineer',
                    status: 'online',
                    isInCall: false,
                    stream: null
                },
                {
                    id: 'user-5',
                    name: 'John Doe',
                    avatar: 'JD',
                    role: 'Project Manager',
                    status: 'busy',
                    isInCall: false,
                    stream: null
                },
                {
                    id: 'user-6',
                    name: 'Emily Chen',
                    avatar: 'EC',
                    role: 'Product Designer',
                    status: 'online',
                    isInCall: false,
                    stream: null
                }
            ],
            
            call: {
                isActive: false,
                participants: new Map(),
                localStream: null,
                isAudioMuted: false,
                isVideoOff: false,
                isScreenSharing: false,
                isRecording: false,
                startTime: null,
                peerConnections: new Map()
            },
            
            chat: {
                messages: [],
                typingUsers: new Set(),
                lastMessageId: 0
            },
            
            files: new Map(),
            notes: ''
        };

        // WebRTC Configuration
        const rtcConfig = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ]
        };

        // Initialize Application
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            console.log('🚀 Initializing ProjectHub...');
            
            renderTeamMembers();
            initializeChat();
            initializeFileHandling();
            setupEventListeners();
            loadInitialData();
            simulateTeamActivity();
            
            showNotification('ProjectHub ready! Click on team members to start calls.', 'success');
        }

        // Team Members Rendering
        function renderTeamMembers() {
            const container = document.getElementById('teamMembers');
            container.innerHTML = '';
            
            AppState.teamMembers.forEach(member => {
                const memberElement = createTeamMemberElement(member);
                container.appendChild(memberElement);
            });
        }

        function createTeamMemberElement(member) {
            const div = document.createElement('div');
            div.className = `team-member ${member.isInCall ? 'in-call' : ''}`;
            div.innerHTML = `
                <div class="member-avatar">
                    ${member.avatar}
                    <div class="status-indicator ${member.status} ${member.isInCall ? 'in-call' : ''}"></div>
                </div>
                <div class="member-info">
                    <div class="member-name">${member.name}</div>
                    <div class="member-status">${member.role} • ${member.status}</div>
                </div>
                <div class="member-actions">
                    <button class="action-btn" onclick="startVideoCall('${member.id}')" title="Video Call">
                        📹
                    </button>
                    <button class="action-btn" onclick="startVoiceCall('${member.id}')" title="Voice Call">
                        📞
                    </button>
                    <button class="action-btn" onclick="sendDirectMessage('${member.id}')" title="Message">
                        💬
                    </button>
                </div>
            `;
            return div;
        }

        // Real Video Calling Functions
        async function startVideoCall(memberId) {
            const member = AppState.teamMembers.find(m => m.id === memberId);
            if (!member) return;
            
            try {
                showNotification(`Starting video call with ${member.name}...`, 'info');
                
                // Get user media
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { width: 1280, height: 720 },
                    audio: { echoCancellation: true, noiseSuppression: true }
                });
                
                AppState.call.localStream = stream;
                AppState.call.isActive = true;
                AppState.call.startTime = new Date();
                
                // Display local video
                const localVideo = document.getElementById('localVideo');
                localVideo.srcObject = stream;
                localVideo.style.display = 'block';
                
                // Update UI
                document.querySelector('.video-placeholder').style.display = 'none';
                document.querySelector('.participant-overlay').style.display = 'flex';
                document.getElementById('videoControls').style.display = 'flex';
                document.getElementById('callStatusHeader').classList.add('active');
                
                // Update member status
                member.isInCall = true;
                updateTeamMember(member);
                
                // Simulate remote participant joining
                setTimeout(() => {
                    addRemoteParticipant(member);
                    showNotification(`${member.name} joined the call`, 'success');
                }, 2000);
                
                // Start call timer
                startCallTimer();
                
            } catch (error) {
                console.error('Error starting video call:', error);
                showNotification('Could not access camera/microphone', 'error');
            }
        }

        async function startVoiceCall(memberId) {
            const member = AppState.teamMembers.find(m => m.id === memberId);
            if (!member) return;
            
            try {
                showNotification(`Starting voice call with ${member.name}...`, 'info');
                
                // Get audio only
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: false,
                    audio: { echoCancellation: true, noiseSuppression: true }
                });
                
                AppState.call.localStream = stream;
                AppState.call.isActive = true;
                AppState.call.startTime = new Date();
                AppState.call.isVideoOff = true;
                
                // Update UI for voice call
                document.getElementById('videoControls').style.display = 'flex';
                document.getElementById('callStatusHeader').classList.add('active');
                document.getElementById('videoBtn').classList.add('active');
                
                // Update member status
                member.isInCall = true;
                updateTeamMember(member);
                
                // Simulate remote participant joining
                setTimeout(() => {
                    addVoiceParticipant(member);
                    showNotification(`${member.name} joined the voice call`, 'success');
                }, 1500);
                
                startCallTimer();
                
            } catch (error) {
                console.error('Error starting voice call:', error);
                showNotification('Could not access microphone', 'error');
            }
        }

        function addRemoteParticipant(member) {
            const videoGrid = document.getElementById('videoGrid');
            
            const participantDiv = document.createElement('div');
            participantDiv.className = 'video-participant';
            participantDiv.id = `participant-${member.id}`;
            
            // Create a canvas for simulated video
            const canvas = document.createElement('canvas');
            canvas.width = 320;
            canvas.height = 240;
            canvas.className = 'video-element';
            
            const ctx = canvas.getContext('2d');
            let hue = Math.random() * 360;
            
            // Animate the simulated video
            function drawFrame() {
                // Create gradient background
                const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
                gradient.addColorStop(0, `hsl(${hue}, 70%, 60%)`);
                gradient.addColorStop(1, `hsl(${hue + 30}, 70%, 40%)`);
                
                ctx.fillStyle = gradient;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Add avatar
                ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
                ctx.font = 'bold 48px Arial';
                ctx.textAlign = 'center';
                ctx.fillText(member.avatar, canvas.width / 2, canvas.height / 2 + 16);
                
                // Add name
                ctx.font = '16px Arial';
                ctx.fillText(member.name, canvas.width / 2, canvas.height - 20);
                
                hue = (hue + 0.5) % 360;
            }
            
            const animationId = setInterval(drawFrame, 50);
            
            participantDiv.innerHTML = `
                <div class="participant-overlay">
                    <span class="participant-name">${member.name}</span>
                    <div class="participant-controls">
                        <div class="participant-control">🎤</div>
                        <div class="participant-control">📹</div>
                    </div>
                </div>
            `;
            
            participantDiv.appendChild(canvas);
            videoGrid.appendChild(participantDiv);
            
            // Store animation ID for cleanup
            member.animationId = animationId;
            
            AppState.call.participants.set(member.id, {
                element: participantDiv,
                member: member,
                animationId: animationId
            });
        }

        function addVoiceParticipant(member) {
            const videoGrid = document.getElementById('videoGrid');
            
            const participantDiv = document.createElement('div');
            participantDiv.className = 'video-participant';
            participantDiv.id = `participant-${member.id}`;
            
            participantDiv.innerHTML = `
                <div class="video-placeholder">
                    <div class="video-placeholder-icon">${member.avatar}</div>
                    <h3>${member.name}</h3>
                    <p>Voice Call</p>
                </div>
                <div class="participant-overlay">
                    <span class="participant-name">${member.name}</span>
                    <div class="participant-controls">
                        <div class="participant-control">🎤</div>
                        <div class="participant-control video-off">📹</div>
                    </div>
                </div>
            `;
            
            videoGrid.appendChild(participantDiv);
            
            AppState.call.participants.set(member.id, {
                element: participantDiv,
                member: member
            });
        }

        function updateTeamMember(member) {
            renderTeamMembers();
        }

        // Call Controls
        function toggleMute() {
            AppState.call.isAudioMuted = !AppState.call.isAudioMuted;
            
            if (AppState.call.localStream) {
                const audioTracks = AppState.call.localStream.getAudioTracks();
                audioTracks.forEach(track => {
                    track.enabled = !AppState.call.isAudioMuted;
                });
            }
            
            const muteBtn = document.getElementById('muteBtn');
            muteBtn.classList.toggle('muted', AppState.call.isAudioMuted);
            muteBtn.innerHTML = AppState.call.isAudioMuted ? '🔇' : '🎤';
            
            const localIndicator = document.getElementById('localMuteIndicator');
            localIndicator.className = `participant-control ${AppState.call.isAudioMuted ? 'muted' : ''}`;
            
            showNotification(AppState.call.isAudioMuted ? 'Microphone muted' : 'Microphone unmuted', 'info');
        }

        function toggleVideo() {
            AppState.call.isVideoOff = !AppState.call.isVideoOff;
            
            if (AppState.call.localStream) {
                const videoTracks = AppState.call.localStream.getVideoTracks();
                videoTracks.forEach(track => {
                    track.enabled = !AppState.call.isVideoOff;
                });
            }
            
            const videoBtn = document.getElementById('videoBtn');
            videoBtn.classList.toggle('active', AppState.call.isVideoOff);
            videoBtn.innerHTML = AppState.call.isVideoOff ? '📹' : '📹';
            
            const localVideo = document.getElementById('localVideo');
            if (AppState.call.isVideoOff) {
                localVideo.style.display = 'none';
                document.querySelector('.video-placeholder').style.display = 'flex';
            } else {
                localVideo.style.display = 'block';
                document.querySelector('.video-placeholder').style.display = 'none';
            }
            
            const localIndicator = document.getElementById('localVideoIndicator');
            localIndicator.className = `participant-control ${AppState.call.isVideoOff ? 'video-off' : ''}`;
            
            showNotification(AppState.call.isVideoOff ? 'Camera turned off' : 'Camera turned on', 'info');
        }

        async function toggleScreenShare() {
            const screenBtn = document.getElementById('screenShareBtn');
            
            try {
                if (!AppState.call.isScreenSharing) {
                    const screenStream = await navigator.mediaDevices.getDisplayMedia({
                        video: true,
                        audio: true
                    });
                    
                    AppState.call.isScreenSharing = true;
                    screenBtn.classList.add('active');
                    screenBtn.innerHTML = '🛑';
                    
                    // Replace video track
                    if (AppState.call.localStream) {
                        const videoTrack = screenStream.getVideoTracks()[0];
                        const audioTrack = screenStream.getAudioTracks()[0];
                        
                        const localVideo = document.getElementById('localVideo');
                        localVideo.srcObject = screenStream;
                        
                        videoTrack.onended = () => {
                            stopScreenShare();
                        };
                    }
                    
                    showNotification('Screen sharing started', 'success');
                } else {
                    stopScreenShare();
                }
            } catch (error) {
                console.error('Error with screen sharing:', error);
                showNotification('Screen sharing not available', 'error');
            }
        }

        function stopScreenShare() {
            AppState.call.isScreenSharing = false;
            
            const screenBtn = document.getElementById('screenShareBtn');
            screenBtn.classList.remove('active');
            screenBtn.innerHTML = '🖥️';
            
            // Restore camera
            const localVideo = document.getElementById('localVideo');
            if (AppState.call.localStream) {
                localVideo.srcObject = AppState.call.localStream;
            }
            
            showNotification('Screen sharing stopped', 'info');
        }

        function endCall() {
            // Stop all streams
            if (AppState.call.localStream) {
                AppState.call.localStream.getTracks().forEach(track => track.stop());
            }
            
            // Clear participants
            AppState.call.participants.forEach((participant) => {
                if (participant.animationId) {
                    clearInterval(participant.animationId);
                }
                participant.element.remove();
                participant.member.isInCall = false;
            });
            
            AppState.call.participants.clear();
            
            // Reset call state
            AppState.call.isActive = false;
            AppState.call.localStream = null;
            AppState.call.isAudioMuted = false;
            AppState.call.isVideoOff = false;
            AppState.call.isScreenSharing = false;
            
            // Reset UI
            document.getElementById('localVideo').style.display = 'none';
            document.querySelector('.video-placeholder').style.display = 'flex';
            document.querySelector('.participant-overlay').style.display = 'none';
            document.getElementById('videoControls').style.display = 'none';
            document.getElementById('callStatusHeader').classList.remove('active');
            
            // Reset buttons
            document.getElementById('muteBtn').classList.remove('muted');
            document.getElementById('videoBtn').classList.remove('active');
            document.getElementById('screenShareBtn').classList.remove('active');
            
            // Update team members
            renderTeamMembers();
            
            showNotification('Call ended', 'info');
        }

        function startCallTimer() {
            const updateTimer = () => {
                if (!AppState.call.isActive) return;
                
                const elapsed = Math.floor((new Date() - AppState.call.startTime) / 1000);
                const minutes = Math.floor(elapsed / 60);
                const seconds = elapsed % 60;
                
                document.getElementById('callDuration').textContent = 
                    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                setTimeout(updateTimer, 1000);
            };
            
            updateTimer();
        }

        // Real-time Chat System
        function initializeChat() {
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            
            messageInput.addEventListener('input', handleTyping);
            messageInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            // Auto-resize textarea
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
                
                // Update send button state
                sendButton.disabled = !this.value.trim();
            });
            
            loadInitialMessages();
        }

        function loadInitialMessages() {
            const initialMessages = [
                {
                    id: 1,
                    senderId: 'user-4',
                    senderName: 'Sarah Parker',
                    senderAvatar: 'SP',
                    text: 'Hey team! I\'ve finished the QA testing for the new user interface. Found a few minor issues that need attention.',
                    timestamp: new Date(Date.now() - 3600000),
                    isOwn: false
                },
                {
                    id: 2,
                    senderId: 'user-2',
                    senderName: 'Alice Smith',
                    senderAvatar: 'AS',
                    text: 'Thanks Sarah! I\'ll review those issues right away. Also, I\'ve updated the design mockups based on yesterday\'s feedback.',
                    timestamp: new Date(Date.now() - 3300000),
                    isOwn: false
                },
                {
                    id: 3,
                    senderId: 'user-3',
                    senderName: 'Mike Johnson',
                    senderAvatar: 'MJ',
                    text: 'Perfect timing! I just pushed the latest code changes. The new API endpoints are ready for integration.',
                    timestamp: new Date(Date.now() - 3000000),
                    isOwn: false
                }
            ];
            
            AppState.chat.messages = initialMessages;
            AppState.chat.lastMessageId = initialMessages.length;
            
            renderMessages();
        }

        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const text = messageInput.value.trim();
            
            if (!text) return;
            
            const message = {
                id: ++AppState.chat.lastMessageId,
                senderId: AppState.currentUser.id,
                senderName: AppState.currentUser.name,
                senderAvatar: AppState.currentUser.avatar,
                text: text,
                timestamp: new Date(),
                isOwn: true
            };
            
            AppState.chat.messages.push(message);
            renderMessages();
            
            messageInput.value = '';
            messageInput.style.height = 'auto';
            document.getElementById('sendButton').disabled = true;
            
            // Simulate team response
            setTimeout(() => simulateTeamResponse(), 1000 + Math.random() * 3000);
        }

        function simulateTeamResponse() {
            const activeMembers = AppState.teamMembers.filter(m => m.status === 'online');
            if (activeMembers.length === 0) return;
            
            const randomMember = activeMembers[Math.floor(Math.random() * activeMembers.length)];
            const responses = [
                "Great point! I agree with that approach.",
                "Let me check on that and get back to you.",
                "That sounds good to me. When should we implement it?",
                "I have some thoughts on this. Mind if we discuss it in our next call?",
                "Perfect! I'll update the documentation accordingly.",
                "Thanks for the update! This helps clarify things.",
                "I'm working on something similar. Let's coordinate our efforts.",
                "Good catch! I'll make sure to address that."
            ];
            
            const randomResponse = responses[Math.floor(Math.random() * responses.length)];
            
            // Show typing indicator
            showTypingIndicator(randomMember.name);
            
            setTimeout(() => {
                hideTypingIndicator();
                
                const message = {
                    id: ++AppState.chat.lastMessageId,
                    senderId: randomMember.id,
                    senderName: randomMember.name,
                    senderAvatar: randomMember.avatar,
                    text: randomResponse,
                    timestamp: new Date(),
                    isOwn: false
                };
                
                AppState.chat.messages.push(message);
                renderMessages();
            }, 1500 + Math.random() * 2000);
        }

        function renderMessages() {
            const container = document.getElementById('chatMessages');
            container.innerHTML = '';
            
            AppState.chat.messages.forEach(message => {
                const messageElement = createMessageElement(message);
                container.appendChild(messageElement);
            });
            
            // Auto-scroll to bottom
            container.scrollTop = container.scrollHeight;
        }

        function createMessageElement(message) {
            const div = document.createElement('div');
            div.className = `message ${message.isOwn ? 'own' : ''}`;
            
            div.innerHTML = `
                <div class="message-avatar">${message.senderAvatar}</div>
                <div class="message-content">
                    <div class="message-bubble">
                        <div class="message-header">
                            <span class="message-author">${message.senderName}</span>
                            <span class="message-time">${formatTime(message.timestamp)}</span>
                        </div>
                        <div class="message-text">${escapeHtml(message.text)}</div>
                    </div>
                </div>
            `;
            
            return div;
        }

        function handleTyping() {
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            
            // Update send button
            sendButton.disabled = !messageInput.value.trim();
            
            // Simulate typing indicator for others (in real app, this would be sent to server)
            if (messageInput.value.trim()) {
                // In real implementation, notify other users that current user is typing
            }
        }

        function showTypingIndicator(userName) {
            const indicator = document.getElementById('typingIndicator');
            const userSpan = document.getElementById('typingUser');
            
            userSpan.textContent = userName;
            indicator.classList.add('show');
        }

        function hideTypingIndicator() {
            const indicator = document.getElementById('typingIndicator');
            indicator.classList.remove('show');
        }

        function formatTime(date) {
            return date.toLocaleTimeString([], { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Chat Actions
        function sendDirectMessage(memberId) {
            const member = AppState.teamMembers.find(m => m.id === memberId);
            if (!member) return;
            
            const messageInput = document.getElementById('messageInput');
            messageInput.value = `@${member.name} `;
            messageInput.focus();
        }

        function clearChat() {
            if (confirm('Are you sure you want to clear all messages?')) {
                AppState.chat.messages = [];
                AppState.chat.lastMessageId = 0;
                renderMessages();
                showNotification('Chat cleared', 'success');
            }
        }

        function exportChat() {
            const chatText = AppState.chat.messages.map(msg => 
                `[${formatTime(msg.timestamp)}] ${msg.senderName}: ${msg.text}`
            ).join('\n');
            
            const blob = new Blob([chatText], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `team-chat-${new Date().toISOString().split('T')[0]}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showNotification('Chat exported successfully', 'success');
        }

        function attachFile() {
            document.getElementById('fileInput').click();
        }

        function addEmoji() {
            const messageInput = document.getElementById('messageInput');
            const emojis = ['😊', '👍', '❤️', '😄', '🎉', '👏', '🔥', '💡', '✅', '🚀', '💯', '🎯'];
            const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
            
            messageInput.value += randomEmoji;
            messageInput.focus();
            handleTyping();
        }

        function mentionTeamMember() {
            const onlineMembers = AppState.teamMembers.filter(m => m.status === 'online');
            if (onlineMembers.length === 0) return;
            
            const randomMember = onlineMembers[Math.floor(Math.random() * onlineMembers.length)];
            const messageInput = document.getElementById('messageInput');
            messageInput.value += `@${randomMember.name} `;
            messageInput.focus();
            handleTyping();
        }

        // File Handling
        function initializeFileHandling() {
            const fileUploadArea = document.getElementById('fileUploadArea');
            const fileInput = document.getElementById('fileInput');
            
            // Drag and drop
            fileUploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                fileUploadArea.classList.add('dragover');
            });
            
            fileUploadArea.addEventListener('dragleave', () => {
                fileUploadArea.classList.remove('dragover');
            });
            
            fileUploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                fileUploadArea.classList.remove('dragover');
                handleFiles(e.dataTransfer.files);
            });
            
            // File input change
            fileInput.addEventListener('change', (e) => {
                handleFiles(e.target.files);
            });
            
            // Load initial files
            loadInitialFiles();
        }

        function triggerFileUpload() {
            document.getElementById('fileInput').click();
        }

        function handleFiles(files) {
            Array.from(files).forEach(file => {
                const fileData = {
                    id: Date.now() + Math.random(),
                    name: file.name,
                    size: formatFileSize(file.size),
                    type: file.type,
                    uploadTime: new Date(),
                    file: file
                };
                
                AppState.files.set(fileData.id, fileData);
                addFileToList(fileData);
                showNotification(`${file.name} uploaded successfully`, 'success');
            });
        }

        function loadInitialFiles() {
            const initialFiles = [
                {
                    id: 1,
                    name: 'Project_Wireframes_v2.fig',
                    size: '2.4 MB',
                    type: 'application/figma',
                    uploadTime: new Date(Date.now() - 7200000) // 2 hours ago
                },
                {
                    id: 2,
                    name: 'User_Research_Report.pdf',
                    size: '1.8 MB',
                    type: 'application/pdf',
                    uploadTime: new Date(Date.now() - 14400000) // 4 hours ago
                },
                {
                    id: 3,
                    name: 'API_Documentation.docx',
                    size: '892 KB',
                    type: 'application/msword',
                    uploadTime: new Date(Date.now() - 86400000) // 1 day ago
                },
                {
                    id: 4,
                    name: 'Design_Assets.zip',
                    size: '15.2 MB',
                    type: 'application/zip',
                    uploadTime: new Date(Date.now() - 259200000) // 3 days ago
                }
            ];
            
            initialFiles.forEach(file => {
                AppState.files.set(file.id, file);
                addFileToList(file);
            });
        }

        function addFileToList(fileData) {
            const fileList = document.getElementById('fileList');
            
            const fileElement = document.createElement('div');
            fileElement.className = 'file-item';
            fileElement.innerHTML = `
                <div class="file-icon">${getFileIcon(fileData.type)}</div>
                <div class="file-info">
                    <div class="file-name">${fileData.name}</div>
                    <div class="file-size">${fileData.size} • ${getTimeAgo(fileData.uploadTime)}</div>
                </div>
            `;
            
            fileElement.addEventListener('click', () => {
                downloadFile(fileData);
            });
            
            fileList.insertBefore(fileElement, fileList.firstChild);
        }

        function getFileIcon(fileType) {
            if (fileType.includes('image')) return '🖼️';
            if (fileType.includes('video')) return '🎥';
            if (fileType.includes('audio')) return '🎵';
            if (fileType.includes('pdf')) return '📄';
            if (fileType.includes('word') || fileType.includes('doc')) return '📝';
            if (fileType.includes('excel') || fileType.includes('sheet')) return '📊';
            if (fileType.includes('powerpoint') || fileType.includes('presentation')) return '📋';
            if (fileType.includes('zip') || fileType.includes('archive')) return '🗜️';
            if (fileType.includes('figma')) return '🎨';
            return '📁';
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function getTimeAgo(date) {
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);
            
            if (diffInSeconds < 60) return 'Just now';
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
            return `${Math.floor(diffInSeconds / 86400)}d ago`;
        }

        function downloadFile(fileData) {
            if (fileData.file) {
                // Real file download
                const url = URL.createObjectURL(fileData.file);
                const a = document.createElement('a');
                a.href = url;
                a.download = fileData.name;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            } else {
                // Simulate download for demo files
                const content = `Sample content for ${fileData.name}`;
                const blob = new Blob([content], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = fileData.name;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }
            
            showNotification(`Downloading ${fileData.name}...`, 'success');
        }

        // Sidebar Navigation
        function switchSidebarTab(tabName) {
            // Update tab buttons
            document.querySelectorAll('.sidebar-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Update tab panels
            document.querySelectorAll('.tab-panel').forEach(panel => {
                panel.classList.remove('active');
            });
            document.getElementById(`${tabName}Panel`).classList.add('active');
        }

        // Notes Functions
        function saveNotes() {
            const notesTextarea = document.getElementById('notesTextarea');
            AppState.notes = notesTextarea.value;
            showNotification('Notes saved successfully', 'success');
        }

        function exportNotes() {
            const notesTextarea = document.getElementById('notesTextarea');
            const content = notesTextarea.value || 'No notes available';
            
            const blob = new Blob([content], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `meeting-notes-${new Date().toISOString().split('T')[0]}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showNotification('Notes exported successfully', 'success');
        }

        // Recording Functions
        function toggleRecording() {
            if (!AppState.call.isRecording) {
                startRecording();
            } else {
                stopRecording();
            }
        }

        function startRecording() {
            if (!AppState.call.isActive) {
                showNotification('Start a call first to begin recording', 'error');
                return;
            }
            
            AppState.call.isRecording = true;
            document.getElementById('recordingHeader').classList.add('active');
            showNotification('Recording started', 'success');
        }

        function stopRecording() {
            AppState.call.isRecording = false;
            document.getElementById('recordingHeader').classList.remove('active');
            showNotification('Recording stopped and saved', 'success');
        }

        // Invite Team Member
        function inviteTeamMember() {
            const email = prompt('Enter email address to invite:');
            if (email && email.includes('@')) {
                showNotification(`Invitation sent to ${email}`, 'success');
            } else if (email) {
                showNotification('Please enter a valid email address', 'error');
            }
        }

        // Event Listeners
        function setupEventListeners() {
            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.target.matches('input, textarea')) return;
                
                // Spacebar to toggle mute
                if (e.code === 'Space' && AppState.call.isActive) {
                    e.preventDefault();
                    toggleMute();
                }
                
                // Escape to end call
                if (e.code === 'Escape' && AppState.call.isActive) {
                    endCall();
                }
            });
            
            // Handle window beforeunload
            window.addEventListener('beforeunload', () => {
                if (AppState.call.isActive) {
                    endCall();
                }
            });
        }

        // Initial Data Loading
        function loadInitialData() {
            // Load saved notes
            const savedNotes = localStorage.getItem('projecthub-notes');
            if (savedNotes) {
                document.getElementById('notesTextarea').value = savedNotes;
                AppState.notes = savedNotes;
            }
        }

        // Team Activity Simulation
        function simulateTeamActivity() {
            // Randomly change team member statuses
            setInterval(() => {
                const member = AppState.teamMembers[Math.floor(Math.random() * AppState.teamMembers.length)];
                const statuses = ['online', 'away', 'busy'];
                const newStatus = statuses[Math.floor(Math.random() * statuses.length)];
                
                if (member.status !== newStatus && !member.isInCall) {
                    member.status = newStatus;
                    updateTeamMember(member);
                }
            }, 30000); // Every 30 seconds
            
            // Simulate random messages from team members
            setInterval(() => {
                if (Math.random() < 0.3) { // 30% chance
                    const onlineMembers = AppState.teamMembers.filter(m => 
                        m.status === 'online' && !m.isInCall
                    );
                    
                    if (onlineMembers.length > 0) {
                        const randomMember = onlineMembers[Math.floor(Math.random() * onlineMembers.length)];
                        const spontaneousMessages = [
                            "Just finished reviewing the latest designs. Looking great!",
                            "Quick update: the backend changes are ready for testing.",
                            "Found an interesting article about UX trends. I'll share the link.",
                            "Coffee break anyone? ☕",
                            "The client meeting went well. They approved our proposal!",
                            "Working on the bug fixes now. Should be done by EOD.",
                            "New feature request came in. Let's discuss in our next standup.",
                            "Great job team! Our sprint is on track. 🚀"
                        ];
                        
                        setTimeout(() => {
                            const message = {
                                id: ++AppState.chat.lastMessageId,
                                senderId: randomMember.id,
                                senderName: randomMember.name,
                                senderAvatar: randomMember.avatar,
                                text: spontaneousMessages[Math.floor(Math.random() * spontaneousMessages.length)],
                                timestamp: new Date(),
                                isOwn: false
                            };
                            
                            AppState.chat.messages.push(message);
                            renderMessages();
                        }, 2000);
                    }
                }
            }, 60000); // Every minute
        }

        // Notification System
        function showNotification(message, type = 'info') {
            // Remove existing notifications
            document.querySelectorAll('.notification').forEach(n => n.remove());
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            
            const icons = {
                success: '✅',
                error: '❌',
                warning: '⚠️',
                info: 'ℹ️'
            };
            
            notification.innerHTML = `${icons[type] || icons.info} ${message}`;
            document.body.appendChild(notification);
            
            // Auto remove
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // Auto-save notes
        setInterval(() => {
            const notesTextarea = document.getElementById('notesTextarea');
            if (notesTextarea && notesTextarea.value !== AppState.notes) {
                AppState.notes = notesTextarea.value;
                localStorage.setItem('projecthub-notes', AppState.notes);
            }
        }, 10000); // Auto-save every 10 seconds

        // Connection status simulation
        function updateConnectionStatus() {
            const status = document.getElementById('connectionStatus');
            const isOnline = navigator.onLine;
            
            if (isOnline) {
                status.className = 'connection-status connected';
                status.innerHTML = '🟢 Connected';
            } else {
                status.className = 'connection-status disconnected';
                status.innerHTML = '🔴 Disconnected';
            }
        }

        window.addEventListener('online', updateConnectionStatus);
        window.addEventListener('offline', updateConnectionStatus);

        // Initialize connection status
        updateConnectionStatus();

        console.log('🚀 ProjectHub Real-time Collaboration Platform Loaded!');
        console.log('💡 Features: Real video/voice calls, Live chat, File sharing, Team presence');
        console.log('⌨️  Shortcuts: Space (mute), Escape (end call)');
    </script>
</body>
</html>