<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Problem</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #A82400;
            --primary-light: rgba(168, 36, 0, 0.1);
            --primary-dark: #8a1d00;
            --background: #FFF8EE;
            --white: #ffffff;
            --accent: #FF6B35;
        }

        @keyframes gradient {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(
                135deg,
                var(--background),
                #FFE4C4,
                #FFDAB9,
                var(--background)
            );
            background-size: 300% 300%;
            animation: gradient 20s ease infinite;
            overflow: hidden;
            perspective: 1500px;
        }

        .container {
            position: relative;
            width: 100%;
            max-width: 1000px;
            padding: 4rem;
            margin: 2rem;
            text-align: center;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(30px);
            border-radius: 40px;
            box-shadow: 
                0 25px 50px rgba(0, 0, 0, 0.1),
                inset 0 0 0 2px rgba(255, 255, 255, 0.3),
                inset 0 0 20px rgba(255, 255, 255, 0.2);
            transform-style: preserve-3d;
            animation: containerFloat 12s ease-in-out infinite;
        }

        .content {
            position: relative;
            z-index: 2;
        }

        h1 {
            font-size: 6rem;
            font-weight: 900;
            background: linear-gradient(135deg, var(--primary), var(--accent));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 2rem;
            text-shadow: 
                3px 3px 6px rgba(0, 0, 0, 0.1);
            animation: titleFloat 8s ease-in-out infinite;
            transform-style: preserve-3d;
        }

        p {
            font-size: 1.6rem;
            line-height: 1.8;
            color: var(--primary);
            max-width: 800px;
            margin: 0 auto 3rem;
            opacity: 0;
            animation: fadeSlideUp 1.2s ease-out 0.5s forwards;
        }

        .button {
            display: inline-block;
            padding: 1.2rem 3rem;
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--white);
            background: linear-gradient(135deg, var(--primary), var(--accent));
            border: none;
            border-radius: 50px;
            text-decoration: none;
            transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            position: relative;
            overflow: hidden;
            z-index: 1;
            box-shadow: 0 10px 20px rgba(168, 36, 0, 0.2);
        }

        .button::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 200%;
            height: 100%;
            background: linear-gradient(135deg, var(--accent), var(--primary), var(--accent));
            background-size: 200% 100%;
            animation: gradientMove 3s linear infinite;
            transition: all 0.6s ease;
            z-index: -1;
        }

        .button:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 
                0 15px 30px rgba(168, 36, 0, 0.3),
                0 8px 12px rgba(168, 36, 0, 0.2);
        }

        .server-container {
            position: relative;
            width: 220px;
            height: 220px;
            margin: 0 auto 4rem;
            animation: serverFloat 8s ease-in-out infinite;
        }

        .server-icon {
            width: 100%;
            height: 100%;
            filter: drop-shadow(0 10px 20px rgba(168, 36, 0, 0.2));
            animation: serverRotate 30s linear infinite;
        }

        .server-icon path, .server-icon circle {
            stroke-dasharray: 1000;
            stroke-dashoffset: 1000;
            animation: drawPath 3s ease forwards;
        }

        .glow {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(
                circle,
                rgba(255, 107, 53, 0.3) 0%,
                rgba(168, 36, 0, 0) 70%
            );
            transform: translate(-50%, -50%);
            animation: glowPulse 5s ease-in-out infinite;
        }

        .particles-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        .particle {
            position: absolute;
            background: linear-gradient(135deg, var(--primary), var(--accent));
            border-radius: 50%;
            pointer-events: none;
        }

        @keyframes containerFloat {
            0%, 100% {
                transform: translateZ(0) rotateX(0) rotateY(0);
            }
            25% {
                transform: translateZ(50px) rotateX(3deg) rotateY(3deg);
            }
            75% {
                transform: translateZ(50px) rotateX(-3deg) rotateY(-3deg);
            }
        }

        @keyframes titleFloat {
            0%, 100% {
                transform: translateY(0) rotateX(0);
            }
            50% {
                transform: translateY(-15px) rotateX(8deg);
            }
        }

        @keyframes serverFloat {
            0%, 100% {
                transform: translateY(0) rotate(0deg);
            }
            50% {
                transform: translateY(-20px) rotate(5deg);
            }
        }

        @keyframes serverRotate {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }

        @keyframes drawPath {
            to {
                stroke-dashoffset: 0;
            }
        }

        @keyframes glowPulse {
            0%, 100% {
                opacity: 0.5;
                transform: translate(-50%, -50%) scale(1);
            }
            50% {
                opacity: 0.9;
                transform: translate(-50%, -50%) scale(1.3);
            }
        }

        @keyframes fadeSlideUp {
            from {
                opacity: 0;
                transform: translateY(40px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes gradientMove {
            0% {
                transform: translateX(0%);
            }
            100% {
                transform: translateX(-50%);
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 2.5rem;
                margin: 1rem;
            }

            h1 {
                font-size: 3.5rem;
            }

            p {
                font-size: 1.2rem;
                padding: 0 1rem;
            }

            .server-container {
                width: 180px;
                height: 180px;
            }
        }

        @media (prefers-reduced-motion: reduce) {
            * {
                animation: none !important;
                transition: none !important;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="particles-container" id="particles"></div>
        <div class="content">
            <div class="server-container">
                <div class="glow"></div>
                <svg class="server-icon" viewBox="0 0 24 24" fill="none" stroke="url(#gradient)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <defs>
                        <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                            <stop offset="0%" style="stop-color: var(--primary)" />
                            <stop offset="100%" style="stop-color: var(--accent)" />
                        </linearGradient>
                    </defs>
                    <path d="M20 2H4C2.89543 2 2 2.89543 2 4V8C2 9.10457 2.89543 10 4 10H20C21.1046 10 22 9.10457 22 8V4C22 2.89543 21.1046 2 20 2Z"/>
                    <path d="M20 14H4C2.89543 14 2 14.8954 2 16V20C2 21.1046 2.89543 22 4 22H20C21.1046 22 22 21.1046 22 20V16C22 14.8954 21.1046 14 20 14Z"/>
                    <circle cx="6" cy="6" r="1"/>
                    <circle cx="6" cy="18" r="1"/>
                </svg>
            </div>
            <h1>Server Problem</h1>
            <p>We're experiencing technical difficulties. Our team is working diligently to restore services. Please try again shortly.</p>
            <a href="/" class="button">Return Home</a>
        </div>
    </div>

    <script>
        // Enhanced particle system
        const particlesContainer = document.getElementById('particles');
        const particleCount = 30;

        for (let i = 0; i < particleCount; i++) {
            createParticle();
        }

        function createParticle() {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            // Random properties
            const size = 4 + Math.random() * 6;
            const startX = Math.random() * 100;
            const startY = Math.random() * 100;
            const duration = 20 + Math.random() * 15;
            const delay = Math.random() * 5;
            
            particle.style.cssText = `
                width: ${size}px;
                height: ${size}px;
                left: ${startX}%;
                top: ${startY}%;
                opacity: ${0.2 + Math.random() * 0.4};
                transform: scale(${0.5 + Math.random()});
                animation: float ${duration}s ${delay}s infinite ease-in-out;
            `;

            // Create unique floating animation
            const angle = Math.random() * Math.PI * 2;
            const distance = 150 + Math.random() * 250;
            const rotations = 2 + Math.random() * 3;
            
            const keyframes = `
                @keyframes float {
                    0% {
                        transform: translate(0, 0) rotate(0deg) scale(1);
                        opacity: ${0.2 + Math.random() * 0.4};
                    }
                    25% {
                        transform: translate(${Math.cos(angle) * distance / 2}px, ${Math.sin(angle) * distance / 2}px) rotate(${rotations * 90}deg) scale(1.2);
                        opacity: ${0.4 + Math.random() * 0.4};
                    }
                    50% {
                        transform: translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px) rotate(${rotations * 180}deg) scale(1);
                        opacity: ${0.2 + Math.random() * 0.4};
                    }
                    75% {
                        transform: translate(${Math.cos(angle) * distance / 2}px, ${Math.sin(angle) * distance / 2}px) rotate(${rotations * 270}deg) scale(1.2);
                        opacity: ${0.4 + Math.random() * 0.4};
                    }
                    100% {
                        transform: translate(0, 0) rotate(${rotations * 360}deg) scale(1);
                        opacity: ${0.2 + Math.random() * 0.4};
                    }
                }
            `;

            const style = document.createElement('style');
            style.innerHTML = keyframes;
            document.head.appendChild(style);

            particlesContainer.appendChild(particle);
        }
    </script>
</body>
</html>