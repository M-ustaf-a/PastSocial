
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-Content-Type-Security-Policy" content="default-src 'self'; script-src 'self' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline'">
    <title>Admin Login Panel</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js" integrity="sha384-[HASH]" crossorigin="anonymous"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }

        body {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            padding: 1rem;
            perspective: 1500px;
            overflow: hidden;
        }

        .particles {
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            z-index: 0;
            pointer-events: none;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
            opacity: 0;
            filter: blur(1px);
        }

        .login-container {
            background: rgba(255, 255, 255, 0.95);
            padding: 2.5rem;
            border-radius: 1.5rem;
            box-shadow: 
                0 10px 25px rgba(0, 0, 0, 0.1),
                0 20px 48px rgba(168, 36, 0, 0.1),
                0 1px 4px rgba(168, 36, 0, 0.1);
            width: 100%;
            max-width: 400px;
            opacity: 0;
            transform-style: preserve-3d;
            transform: rotateX(-15deg) translateY(20px);
            backdrop-filter: blur(10px);
            position: relative;
            z-index: 1;
            overflow: hidden;
        }

        .login-container::before,
        .login-container::after {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            border-radius: 1.5rem;
            z-index: -1;
            transition: all 0.5s ease;
        }

        .login-container::before {
            background: linear-gradient(45deg, #a82400, transparent, #a82400);
            opacity: 0;
        }

        .login-container::after {
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transform: translateX(-100%) skewX(-15deg);
        }

        .login-container:hover::before {
            opacity: 0.5;
        }

        .login-container:hover::after {
            transform: translateX(100%) skewX(-15deg);
            transition: 0.7s ease-in-out;
        }

        h1 {
            color: #a82400;
            text-align: center;
            margin-bottom: 2.5rem;
            font-size: 2rem;
            opacity: 0;
            transform: scale(0.9) translateY(-20px);
            text-shadow: 0 2px 4px rgba(168, 36, 0, 0.1);
            position: relative;
        }

        h1::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%) scaleX(0);
            width: 50px;
            height: 3px;
            background: linear-gradient(90deg, #a82400, #ff6b4a);
            border-radius: 3px;
            transition: transform 0.5s ease;
        }

        .login-container:hover h1::after {
            transform: translateX(-50%) scaleX(1);
        }

        .form-group {
            margin-bottom: 2rem;
            opacity: 0;
            transform: translateX(-20px);
            position: relative;
            overflow: hidden;
        }

        .form-group::after {
            content: '';
            position: absolute;
            left: 0;
            bottom: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, #a82400, #ff6b4a);
            transform: translateX(-100%);
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .form-group:focus-within::after {
            transform: translateX(0);
        }

        label {
            display: block;
            margin-bottom: 0.75rem;
            color: #a82400;
            font-weight: 500;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            transform-origin: left;
        }

        .form-group:focus-within label {
            transform: scale(1.1);
            color: #ff6b4a;
        }

        input {
            width: 100%;
            padding: 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 0.75rem;
            font-size: 1rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            background: rgba(255, 255, 255, 0.9);
        }

        input:focus {
            outline: none;
            border-color: #a82400;
            box-shadow: 
                0 0 0 3px rgba(168, 36, 0, 0.1),
                0 4px 12px rgba(168, 36, 0, 0.1);
            transform: translateY(-2px);
            background: white;
        }

        input::placeholder {
            color: #a0aec0;
            transition: all 0.3s ease;
        }

        input:focus::placeholder {
            opacity: 0;
            transform: translateX(10px);
        }

        .error-message {
            color: #e53e3e;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease;
        }

        .error-message.visible {
            opacity: 1;
            transform: translateY(0);
        }

        button {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(135deg, #a82400, #ff6b4a);
            color: white;
            border: none;
            border-radius: 0.75rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            opacity: 0;
            transform: translateY(20px);
            position: relative;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(168, 36, 0, 0.2);
        }

        button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(168, 36, 0, 0.3);
        }

        button:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .success-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at center, rgba(168, 36, 0, 0.2), transparent);
            z-index: 2;
            opacity: 0;
            pointer-events: none;
        }

        @keyframes shimmer {
            0% { background-position: -200% center; }
            100% { background-position: 200% center; }
        }

        .loading {
            background: linear-gradient(
                90deg,
                #a82400 25%,
                #ff6b4a 50%,
                #a82400 75%
            );
            background-size: 200% 100%;
            animation: shimmer 2s infinite;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .success-particle {
            position: absolute;
            background: #4CAF50;
            border-radius: 50%;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="particles"></div>
    <div class="success-overlay"></div>
    <div class="login-container">
        <h1>Admin Login Panel</h1>
        <form id="loginForm" method="post" action="/adminLoginPanel/713af207-d906-4d49-85cb-dddbde483a59/<%=communityId%>" autocomplete="off">
            <div class="form-group">
                <label for="email">Email</label>
                <input 
                    id="email" 
                    type="email" 
                    name="email" 
                    placeholder="Enter your email"
                    required
                    pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
                >
                <div class="error-message" id="emailError">Please enter a valid email address</div>
            </div>
            <div class="form-group">
                <label for="communityId">Community ID</label>
                <input 
                    type="text" 
                    id="communityId" 
                    name="communityId"
                    placeholder="Enter community ID"
                    required
                    pattern="^[a-zA-Z0-9-]{3,}$"
                >
                <div class="error-message" id="communityIdError">Community ID must be at least 3 characters</div>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input 
                    type="password" 
                    id="password" 
                    name="password"
                    placeholder="Enter your password"
                    required
                    minlength="8"
                >
                <div class="error-message" id="passwordError">Password must be at least 8 characters</div>
            </div>
            <button type="submit" id="submitButton">Login</button>
        </form>
    </div>

    <script>
        // Debounce function for performance
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function random(min, max) {
            return Math.random() * (max - min) + min;
        }

        // Create floating particles
        function createParticles() {
            const particlesContainer = document.querySelector('.particles');
            const particleCount = 50;
            const colors = ['#a82400', '#ff6b4a', '#ff4a1f'];
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                
                const size = random(4, 12);
                const color = colors[Math.floor(random(0, colors.length))];
                
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.background = color;
                
                particle.style.left = `${random(0, 100)}%`;
                particle.style.top = `${random(0, 100)}%`;
                
                particlesContainer.appendChild(particle);
                
                // Initial fade in
                gsap.to(particle, {
                    opacity: 0.3,
                    duration: random(1, 3),
                    delay: random(0, 2)
                });
                
                // Continuous floating animation
                gsap.to(particle, {
                    y: -300,
                    x: random(-100, 100),
                    rotation: random(0, 360),
                    duration: random(10, 30),
                    repeat: -1,
                    delay: random(-20, 0),
                    ease: "none",
                    yoyo: true
                });
            }
        }

        // Form validation
        function validateForm() {
            const email = document.getElementById('email');
            const communityId = document.getElementById('communityId');
            const password = document.getElementById('password');
            const submitButton = document.getElementById('submitButton');
            
            const emailValid = email.checkValidity();
            const communityIdValid = communityId.checkValidity();
            const passwordValid = password.checkValidity();

            document.getElementById('emailError').classList.toggle('visible', !emailValid);
            document.getElementById('communityIdError').classList.toggle('visible', !communityIdValid);
            document.getElementById('passwordError').classList.toggle('visible', !passwordValid);

            submitButton.disabled = !(emailValid && communityIdValid && passwordValid);
            
            return emailValid && communityIdValid && passwordValid;
        }

        // Focus effects
        function createFocusParticles(element) {
            const rect = element.getBoundingClientRect();
            const particleCount = 5;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.position = 'fixed';
                particle.style.left = `${rect.left + rect.width / 2}px`;
                particle.style.top = `${rect.top + rect.height / 2}px`;
                particle.style.width = '8px';
                particle.style.height = '8px';
                particle.style.background = '#ff6b4a';
                particle.style.opacity = '0.6';
                document.body.appendChild(particle);
                
                gsap.to(particle, {
                    x: random(-50, 50),
                    y: random(-50, 50),
                    opacity: 0,
                    duration: random(0.8, 1.2),
                    ease: "power2.out",
                    onComplete: () => particle.remove()
                });
            }
        }

        function initializeAnimations() {
            // Fade in main container
            gsap.to('.login-container', {
                opacity: 1,
                rotationX: 0,
                y: 0,
                duration: 1,
                ease: "power3.out"
            });

            // Stagger form elements
            gsap.to('h1', {
                opacity: 1,
                scale: 1,
                y: 0,
                duration: 0.8,
                delay: 0.3,
                ease: "back.out(1.7)"
            });

            gsap.to('.form-group', {
                opacity: 1,
                x: 0,
                duration: 0.8,
                stagger: 0.15,
                delay: 0.5,
                ease: "power2.out"
            });

            gsap.to('button', {
                opacity: 1,
                y: 0,
                duration: 0.8,
                delay: 1,
                ease: "power2.out"
            });
        }

        // Initialize animations and form handling
        window.addEventListener('DOMContentLoaded', () => {
            createParticles();

            const form = document.getElementById('loginForm');
            const inputs = document.querySelectorAll('input');

            // Initial animations
            const tl = gsap.timeline({
                defaults: { ease: "power3.out" }
            });

            tl.to('.login-container', {
                opacity: 1,
                rotateX: 0,
                y: 0,
                duration: 1.2,
                ease: "power4.out"
            })
            .to('h1', {
                opacity: 1,
                scale: 1,
                y: 0,
                duration: 0.8,
                ease: "back.out(1.7)"
            }, "-=0.6")
            .to('.form-group', {
                opacity: 1,
                x: 0,
                duration: 0.8,
                stagger: 0.2,
                ease: "back.out(1.7)"
            }, "-=0.4")
            .to('button', {
                opacity: 1,
                y: 0,
                duration: 0.8,
                ease: "back.out(1.7)"
            }, "-=0.4");

            // Input validation
            const debouncedValidate = debounce(validateForm, 300);
            inputs.forEach(input => {
                input.addEventListener('input', debouncedValidate);
                input.addEventListener('focus', () => {
                    gsap.to(input, {
                        scale: 1.02,
                        duration: 0.4,
                        ease: "power2.out"
                    });
                });

                input.addEventListener('blur', () => {
                    gsap.to(input, {
                        scale: 1,
                        duration: 0.4,
                        ease: "power2.out"
                    });
                    validateForm();
                });
            });

            // Form submission
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                if (!validateForm()) {
                    gsap.to('.login-container', {
                        x: 10,
                        rotateZ: 2,
                        duration: 0.1,
                        yoyo: true,
                        repeat: 5,
                        ease: "rough({ template: none, strength: 1, points: 20, taper: 'none', randomize: true, clamp: false})"
                    });
                    return;
                }

                const submitButton = document.getElementById('submitButton');
                submitButton.disabled = true;
                submitButton.textContent = 'Logging in...';

                try {
                    const formData = new FormData(form);
                    const response = await fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                        },
                        body: JSON.stringify(Object.fromEntries(formData)),
                        credentials: 'same-origin'
                    });

                    if (!response.ok) {
                        throw new Error('Login failed');
                    }

                    // Success animation
                    const tl = gsap.timeline();
                    tl.to('.success-overlay', {
                        opacity: 1,
                        duration: 0.5
                    })
                    .to('.login-container', {
                        scale: 0.8,
                        opacity: 0,
                        rotateX: 45,
                        y: -100,
                        duration: 0.8,
                        ease: "power4.in"
                    }, "-=0.3");

                    // Redirect after animation
                    setTimeout(() => {
                        const communityId = document.getElementById("communityId")?.value.trim();
                        if (communityId) {
                            window.location.href = `/adminPanel/713af207-d906-4d49-85cb-dddbde483a59/${encodeURIComponent(communityId)}`;
                        } else {
                            console.error("Community ID is missing");
                        }
                    }, 1500);

                } catch (error) {
                    console.error('Login error:', error);
                    submitButton.disabled = false;
                    submitButton.textContent = 'Login';
                    
                    gsap.to('.login-container', {
                        x: 10,
                        rotateZ: 2,
                        duration: 0.1,
                        yoyo: true,
                        repeat: 5,
                        ease: "rough({ template: none, strength: 1, points: 20, taper: 'none', randomize: true, clamp: false})"
                    });

                    // Show error message
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message visible';
                    errorDiv.textContent = 'Login failed. Please check your credentials.';
                    form.insertBefore(errorDiv, submitButton);
                    
                    // Remove error message after 5 seconds
                    setTimeout(() => {
                        errorDiv.remove();
                    }, 5000);
                }
            });
        });

        // Prevent form resubmission on page refresh
        if (window.history.replaceState) {
            window.history.replaceState(null, null, window.location.href);
        }

        // Clean up resources when page is unloaded
        window.addEventListener('unload', () => {
            const particles = document.querySelectorAll('.particle');
            particles.forEach(particle => {
                gsap.killTweensOf(particle);
                particle.remove();
            });
        });
    </script>
</body>
</html>