<%- layout('/layouts/boilerplate.ejs') %>

<style>
    :root {
        --primary-color: #A82400;
        --primary-dark: #8A1E00;
        --secondary-color: #D63A0D;
        --accent-color: #FFEBCD;
        --bg-color: #FFEBCD;
        --card-bg: #FFF5E6;
        --hover-bg: #FFE4CC;
        --text-primary: #A82400;
        --text-secondary: #6B4423;
        --text-dark: #3A2317;
        --white: #FFFFFF;
        --glass: rgba(255, 255, 255, 0.25);
        --glass-border: rgba(255, 255, 255, 0.18);
        --success: #059669;
        --warning: #F59E0B;
        --error: #DC2626;
        --shadow-sm: 0 2px 4px rgba(168, 36, 0, 0.08);
        --shadow-md: 0 4px 12px rgba(168, 36, 0, 0.12);
        --shadow-lg: 0 8px 24px rgba(168, 36, 0, 0.16);
        --shadow-xl: 0 20px 40px rgba(168, 36, 0, 0.2);
        --radius-sm: 12px;
        --radius-md: 16px;
        --radius-lg: 24px;
        --radius-xl: 32px;
        --transition-base: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        --transition-slow: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Plus Jakarta Sans', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, var(--bg-color) 0%, #FFD7A3 30%, var(--bg-color) 100%);
        min-height: 100vh;
        color: var(--text-dark);
        line-height: 1.6;
        overflow-x: hidden;
        padding-top: 80px;
    }

    /* Professional Typography System */
    .text-xs { font-size: 0.75rem; }
    .text-sm { font-size: 0.875rem; }
    .text-base { font-size: 1rem; }
    .text-lg { font-size: 1.125rem; }
    .text-xl { font-size: 1.25rem; }
    .text-2xl { font-size: 1.5rem; }
    .text-3xl { font-size: 1.875rem; }

    .font-medium { font-weight: 500; }
    .font-semibold { font-weight: 600; }
    .font-bold { font-weight: 700; }
    .font-extrabold { font-weight: 800; }

    /* Professional Spacing System */
    .p-1 { padding: 0.25rem; }
    .p-2 { padding: 0.5rem; }
    .p-3 { padding: 0.75rem; }
    .p-4 { padding: 1rem; }
    .p-6 { padding: 1.5rem; }
    .p-8 { padding: 2rem; }

    .m-1 { margin: 0.25rem; }
    .m-2 { margin: 0.5rem; }
    .m-3 { margin: 0.75rem; }
    .m-4 { margin: 1rem; }
    .m-6 { margin: 1.5rem; }
    .m-8 { margin: 2rem; }

    .mb-2 { margin-bottom: 0.5rem; }
    .mb-3 { margin-bottom: 0.75rem; }
    .mb-4 { margin-bottom: 1rem; }
    .mb-6 { margin-bottom: 1.5rem; }
    .mb-8 { margin-bottom: 2rem; }

    /* Background Animation System */
    .bg-animation {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 0;
        overflow: hidden;
    }

    .floating-orb {
        position: absolute;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        opacity: 0.04;
        animation: professional-float 25s infinite ease-in-out;
    }

    .floating-orb:nth-child(1) {
        width: 300px;
        height: 300px;
        top: -150px;
        right: -150px;
        animation-delay: 0s;
    }

    .floating-orb:nth-child(2) {
        width: 200px;
        height: 200px;
        bottom: -100px;
        left: -100px;
        animation-delay: -12s;
    }

    .floating-orb:nth-child(3) {
        width: 150px;
        height: 150px;
        top: 40%;
        left: 20%;
        animation-delay: -7s;
    }

    @keyframes professional-float {
        0%, 100% { transform: translate(0, 0) rotate(0deg) scale(1); }
        25% { transform: translate(25px, -25px) rotate(90deg) scale(1.05); }
        50% { transform: translate(-15px, 15px) rotate(180deg) scale(0.95); }
        75% { transform: translate(30px, 5px) rotate(270deg) scale(1.02); }
    }

    /* Professional Container System */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        position: relative;
        z-index: 10;
    }

    .content-wrapper {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    /* Professional Post Creator Component */
    .post-creator {
        background: var(--white);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--glass-border);
        margin-bottom: 2rem;
        overflow: hidden;
        transition: var(--transition-base);
        animation: slide-in-down 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @keyframes slide-in-down {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .post-creator:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-xl);
    }

    .post-creator__trigger {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1.5rem;
        cursor: pointer;
        transition: var(--transition-base);
    }

    .post-creator__avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        border: 2px solid var(--primary-color);
        object-fit: cover;
        transition: var(--transition-base);
    }

    .post-creator__avatar:hover {
        transform: scale(1.05);
        border-color: var(--secondary-color);
    }

    .post-creator__prompt {
        flex: 1;
        background: var(--card-bg);
        border: 2px solid var(--hover-bg);
        border-radius: 25px;
        padding: 0.875rem 1.25rem;
        color: var(--text-secondary);
        font-size: 1rem;
        font-weight: 500;
        transition: var(--transition-base);
        cursor: pointer;
    }

    .post-creator__trigger:hover .post-creator__prompt {
        border-color: var(--primary-color);
        background: var(--white);
        color: var(--primary-color);
        transform: translateY(-1px);
    }

    /* Professional Modal System */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(12px);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        opacity: 0;
        transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .modal--active {
        display: flex;
        opacity: 1;
    }

    .modal__container {
        background: var(--white);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-xl);
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow: hidden;
        border: 1px solid var(--glass-border);
        transform: scale(0.95);
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .modal--active .modal__container {
        transform: scale(1);
    }

    .modal__header {
        background: linear-gradient(135deg, var(--card-bg), var(--hover-bg));
        padding: 1.5rem;
        border-bottom: 1px solid var(--glass-border);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal__title {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--text-dark);
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .modal__close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--text-secondary);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: var(--transition-base);
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
    }

    .modal__close:hover {
        background: var(--hover-bg);
        color: var(--primary-color);
        transform: rotate(90deg);
    }

    .modal__body {
        padding: 2rem;
        padding-top: 102px;
        max-height: 60vh;
        overflow-y: auto;
    }

    .modal__footer {
        padding: 1.5rem 2rem;
        background: var(--card-bg);
        border-top: 1px solid var(--glass-border);
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }

    /* Professional Form System */
    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group__label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-dark);
        font-weight: 600;
        font-size: 0.875rem;
    }

    .form-control {
        width: 100%;
        padding: 0.875rem 1rem;
        border: 2px solid var(--hover-bg);
        border-radius: var(--radius-md);
        background: var(--white);
        font-size: 1rem;
        font-family: inherit;
        transition: var(--transition-base);
        color: var(--text-dark);
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(168, 36, 0, 0.1);
        transform: translateY(-1px);
    }

    .form-control:hover {
        border-color: var(--secondary-color);
    }

    .form-control--textarea {
        min-height: 100px;
        resize: vertical;
        font-family: inherit;
    }

    /* Professional File Upload System */
    .file-upload {
        border: 2px dashed var(--hover-bg);
        border-radius: var(--radius-md);
        padding: 2rem;
        text-align: center;
        background: var(--card-bg);
        transition: var(--transition-base);
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .file-upload:hover {
        border-color: var(--primary-color);
        background: var(--hover-bg);
        transform: translateY(-2px);
    }

    .file-upload--dragover {
        border-color: var(--primary-color);
        background: var(--hover-bg);
        transform: scale(1.02);
    }

    .file-upload__input {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        opacity: 0;
        cursor: pointer;
    }

    .file-upload__icon {
        font-size: 2.5rem;
        color: var(--text-secondary);
        margin-bottom: 1rem;
        transition: var(--transition-base);
    }

    .file-upload:hover .file-upload__icon {
        transform: scale(1.1);
        color: var(--primary-color);
    }

    .file-upload__text {
        color: var(--text-dark);
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .file-upload__subtext {
        color: var(--text-secondary);
        font-size: 0.875rem;
    }

    .file-preview {
        display: none;
        align-items: center;
        gap: 1rem;
        background: var(--card-bg);
        padding: 1rem;
        border-radius: var(--radius-md);
        margin-top: 1rem;
        border: 1px solid var(--hover-bg);
    }

    .file-preview--active {
        display: flex;
        animation: slide-in-up 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @keyframes slide-in-up {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .file-preview__info {
        flex: 1;
    }

    .file-preview__name {
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 0.25rem;
        font-size: 0.875rem;
    }

    .file-preview__size {
        font-size: 0.75rem;
        color: var(--text-secondary);
    }

    .file-preview__remove {
        background: var(--error);
        color: var(--white);
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition-base);
        font-size: 1.125rem;
    }

    .file-preview__remove:hover {
        background: #B91C1C;
        transform: scale(1.1);
    }

    /* Professional Button System */
    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: var(--radius-md);
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition-base);
        font-size: 0.9rem;
        position: relative;
        overflow: hidden;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        white-space: nowrap;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
    }

    .btn:hover::before {
        left: 100%;
    }

    .btn--primary {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: var(--white);
        box-shadow: var(--shadow-md);
    }

    .btn--primary:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }

    .btn--secondary {
        background: var(--white);
        color: var(--primary-color);
        border: 2px solid var(--primary-color);
    }

    .btn--secondary:hover {
        background: var(--primary-color);
        color: var(--white);
        transform: translateY(-2px);
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
    }

    .btn--loading {
        pointer-events: none;
    }

    /* Professional Post Feed System */
    .posts-feed {
        display: grid;
        gap: 2rem;
    }

    .post-card {
        background: var(--white);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-lg);
        overflow: hidden;
        border: 1px solid var(--glass-border);
        transition: var(--transition-base);
        animation: slide-in-up 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .post-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-xl);
    }

    .post-card__header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--glass-border);
    }

    .post-card__author {
        display: flex;
        align-items: center;
        gap: 1rem;
        text-decoration: none;
        color: inherit;
        transition: var(--transition-base);
    }

    .post-card__author:hover .post-card__avatar {
        transform: scale(1.05);
    }

    .post-card__avatar {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        border: 2px solid var(--primary-color);
        object-fit: cover;
        transition: var(--transition-base);
    }

    .post-card__author-info {
        flex: 1;
    }

    .post-card__author-name {
        font-weight: 700;
        color: var(--text-dark);
        margin-bottom: 0.125rem;
        font-size: 1rem;
    }

    .post-card__timestamp {
        color: var(--text-secondary);
        font-size: 0.8rem;
        font-weight: 500;
    }

    .post-card__content {
        padding: 1.5rem;
    }

    .post-card__title {
        font-size: 1.375rem;
        font-weight: 700;
        color: var(--text-dark);
        margin-bottom: 0.75rem;
        line-height: 1.4;
    }

    .post-card__text {
        color: var(--text-secondary);
        line-height: 1.6;
        margin-bottom: 1.25rem;
        font-size: 0.95rem;
    }

    .post-card__image-container {
        border-radius: var(--radius-md);
        overflow: hidden;
        box-shadow: var(--shadow-sm);
        transition: var(--transition-base);
    }

    .post-card__image-container:hover {
        transform: scale(1.01);
        box-shadow: var(--shadow-md);
    }

    .post-card__image {
        width: 100%;
        height: auto;
        max-height: 350px;
        object-fit: cover;
        transition: var(--transition-base);
    }

    .post-card__actions {
        padding: 1rem 1.5rem;
        background: var(--card-bg);
        border-top: 1px solid var(--glass-border);
        display: flex;
        gap: 0.75rem;
    }

    .post-action {
        display: flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.625rem 0.875rem;
        background: transparent;
        border: none;
        border-radius: var(--radius-sm);
        color: var(--text-secondary);
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition-base);
        font-size: 0.85rem;
    }

    .post-action:hover {
        background: var(--hover-bg);
        color: var(--primary-color);
        transform: translateY(-1px);
    }

    .post-action--liked {
        color: #E11D48;
    }

    .post-action__icon {
        width: 18px;
        height: 18px;
        transition: var(--transition-base);
    }

    .post-action:hover .post-action__icon {
        transform: scale(1.1);
    }

    /* Professional Loading System */
    .loading-state {
        display: none;
        justify-content: center;
        align-items: center;
        padding: 3rem;
        text-align: center;
    }

    .loading-state--active {
        display: flex;
    }

    .loader {
        width: 40px;
        height: 40px;
        border: 3px solid var(--hover-bg);
        border-top-color: var(--primary-color);
        border-radius: 50%;
        animation: loader-spin 1s linear infinite;
    }

    @keyframes loader-spin {
        to { transform: rotate(360deg); }
    }

    /* Professional Notification System */
    .notification {
        position: fixed;
        top: 100px;
        right: 1.5rem;
        background: var(--success);
        color: var(--white);
        padding: 1rem 1.5rem;
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-lg);
        transform: translateX(400px);
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        z-index: 10000;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .notification--active {
        transform: translateX(0);
    }

    .notification--error {
        background: var(--error);
    }

    .notification--warning {
        background: var(--warning);
    }

    /* Professional Responsive System */
    @media (max-width: 768px) {
        .content-wrapper {
            padding: 1rem 0.75rem;
        }

        .modal__body {
            padding: 1.5rem 1rem;
        }

        .modal__footer {
            padding: 1rem 1.5rem;
            flex-direction: column;
            gap: 0.75rem;
        }

        .btn {
            width: 100%;
            justify-content: center;
        }

        .post-card__actions {
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .post-action {
            flex: 1;
            justify-content: center;
            min-width: 0;
        }

        .post-action__text {
            display: none;
        }

        .notification {
            right: 1rem;
            left: 1rem;
            transform: translateY(-100px);
        }

        .notification--active {
            transform: translateY(0);
        }
    }

    @media (max-width: 480px) {
        .post-creator__trigger {
            padding: 1rem;
        }

        .post-creator__avatar {
            width: 40px;
            height: 40px;
        }

        .post-creator__prompt {
            font-size: 0.875rem;
            padding: 0.75rem 1rem;
        }

        .post-card__header {
            padding: 1rem;
        }

        .post-card__content {
            padding: 1rem;
        }

        .post-card__title {
            font-size: 1.125rem;
        }

        .modal__header {
            padding: 1rem;
        }

        .modal__title {
            font-size: 1.125rem;
        }
    }

    /* Professional Accessibility */
    @media (prefers-reduced-motion: reduce) {
        * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
    }

    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }

    /* Professional Focus States */
    .btn:focus,
    .form-control:focus,
    .post-action:focus,
    .modal__close:focus {
        outline: 2px solid var(--primary-color);
        outline-offset: 2px;
    }
</style>

<!-- Animated Background -->
<div class="bg-animation" aria-hidden="true">
    <div class="floating-orb"></div>
    <div class="floating-orb"></div>
    <div class="floating-orb"></div>
</div>

<!-- Main Content -->
<div class="container">
    <div class="content-wrapper">
        <!-- Post Creator Component -->
        <% if (currUser && currUser.communityId === communityId) { %>
        <section class="post-creator" aria-labelledby="post-creator-title">
            <h2 id="post-creator-title" class="sr-only">Create a new post</h2>
            <div class="post-creator__trigger" role="button" tabindex="0" aria-label="Open post creation form">
                <img 
                    src="<%= currUser.image.url %>" 
                    alt="<%= currUser.adminData?.name || currUser.username %>" 
                    class="post-creator__avatar"
                >
                <div class="post-creator__prompt">
                    What's on your mind today?
                </div>
            </div>
        </section>
        <% } %>

        <!-- Posts Feed -->
        <main class="posts-feed" role="main" aria-label="Community posts">
            <!-- Loading State -->
            <div class="loading-state" id="postsLoader" aria-live="polite">
                <div class="loader" aria-label="Loading posts"></div>
            </div>

            <!-- Dynamic Posts Container -->
            <% if (typeof newUploadPost !== 'undefined' && newUploadPost.length > 0) { %>
                <% newUploadPost.forEach((uploadPost, index) => { %>
                <article class="post-card" style="animation-delay: <%= index * 0.1 %>s">
                    <header class="post-card__header">
                        <a href="/community/<%= community.id %>/<%= uploadPost.user.id %>/showProfile" class="post-card__author">
                            <img 
                                src="<%= uploadPost.user.image.url %>" 
                                alt="<%= uploadPost.user.name %>" 
                                class="post-card__avatar"
                            >
                            <div class="post-card__author-info">
                                <h3 class="post-card__author-name"><%= uploadPost.user.name %></h3>
                                <time class="post-card__timestamp" datetime="<%= uploadPost.createdAt %>">
                                    <%= new Date(uploadPost.createdAt || Date.now()).toLocaleDateString('en-US', { 
                                        year: 'numeric', 
                                        month: 'short', 
                                        day: 'numeric' 
                                    }) %>
                                </time>
                            </div>
                        </a>
                    </header>
                    
                    <div class="post-card__content">
                        <h2 class="post-card__title"><%= uploadPost.title %></h2>
                        <p class="post-card__text"><%= uploadPost.content %></p>
                        
                        <% if (uploadPost.image && uploadPost.image.url) { %>
                        <div class="post-card__image-container">
                            <img 
                                src="<%= uploadPost.image.url %>" 
                                alt="<%= uploadPost.title %>" 
                                class="post-card__image"
                                loading="lazy"
                            >
                        </div>
                        <% } %>
                    </div>
                    
                    <footer class="post-card__actions">
                        <button class="post-action" data-action="like" data-post-id="<%= uploadPost._id %>" aria-label="Like this post">
                            <svg class="post-action__icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                            </svg>
                            <span class="post-action__text">Like</span>
                        </button>
                        
                        <button class="post-action" data-action="comment" data-post-id="<%= uploadPost._id %>" aria-label="Comment on this post">
                            <svg class="post-action__icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                            </svg>
                            <span class="post-action__text">Comment</span>
                        </button>
                        
                        <button class="post-action" data-action="share" data-post-id="<%= uploadPost._id %>" aria-label="Share this post">
                            <svg class="post-action__icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"></path>
                            </svg>
                            <span class="post-action__text">Share</span>
                        </button>
                    </footer>
                </article>
                <% }) %>
            <% } else { %>
                <!-- Empty State -->
                <div class="empty-state" role="status" aria-live="polite">
                    <div class="empty-state__icon">📝</div>
                    <h2 class="empty-state__title">No posts yet</h2>
                    <p class="empty-state__description">Be the first to share something with the community!</p>
                </div>
            <% } %>
        </main>
    </div>
</div>

<!-- Post Creation Modal -->
<div class="modal" id="postModal" role="dialog" aria-labelledby="modal-title" aria-hidden="true">
    <div class="modal__container">
        <header class="modal__header">
            <h2 class="modal__title" id="modal-title">
                <% if (currUser) { %>
                <img 
                    src="<%= currUser.image.url %>" 
                    alt="<%= currUser.adminData?.name || currUser.username %>" 
                    class="post-creator__avatar"
                    style="width: 36px; height: 36px;"
                >
                <% } %>
                Create New Post
            </h2>
            <button class="modal__close" type="button" aria-label="Close modal">
                ×
            </button>
        </header>
        
        <form action="/community/<%= community.id %>/main" method="post" enctype="multipart/form-data" id="postForm" novalidate>
            <div class="modal__body">
                <div class="form-group">
                    <label for="postTitle" class="form-group__label">Post Title</label>
                    <input 
                        type="text" 
                        id="postTitle"
                        name="upload[title]" 
                        class="form-control" 
                        placeholder="What's the title of your post?"
                        required
                        maxlength="100"
                        aria-describedby="title-error"
                    >
                    <div id="title-error" class="form-error" role="alert"></div>
                </div>
                
                <div class="form-group">
                    <label for="postContent" class="form-group__label">Content</label>
                    <textarea 
                        id="postContent"
                        name="upload[content]" 
                        class="form-control form-control--textarea" 
                        placeholder="Share your thoughts, ideas, or experiences with the community..."
                        required
                        maxlength="1000"
                        rows="4"
                        aria-describedby="content-error"
                    ></textarea>
                    <div id="content-error" class="form-error" role="alert"></div>
                </div>
                
                <div class="form-group">
                    <label class="form-group__label">Image</label>
                    <div class="file-upload" id="fileUploadArea">
                        <input 
                            type="file" 
                            id="fileUpload"
                            name="upload[image]" 
                            class="file-upload__input" 
                            accept="image/*" 
                            required
                            aria-describedby="file-error"
                        >
                        <div class="file-upload__icon" aria-hidden="true">📷</div>
                        <div class="file-upload__text">Click to upload or drag and drop</div>
                        <div class="file-upload__subtext">PNG, JPG, GIF up to 5MB</div>
                    </div>
                    <div class="file-preview" id="filePreview">
                        <div class="file-preview__info">
                            <div class="file-preview__name" id="fileName"></div>
                            <div class="file-preview__size" id="fileSize"></div>
                        </div>
                        <button type="button" class="file-preview__remove" aria-label="Remove file">×</button>
                    </div>
                    <div id="file-error" class="form-error" role="alert"></div>
                </div>
            </div>
            
            <footer class="modal__footer">
                <button type="button" class="btn btn--secondary" id="cancelBtn">Cancel</button>
                <button type="submit" class="btn btn--primary" id="publishBtn">
                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                    </svg>
                    <span>Publish Post</span>
                </button>
            </footer>
        </form>
    </div>
</div>

<!-- Notification System -->
<div class="notification" id="notification" role="alert" aria-live="assertive">
    <svg width="18" height="18" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
    </svg>
    <span id="notificationText">Post published successfully!</span>
</div>

<script>
class ProfessionalCommunityPosts {
    constructor() {
        this.state = {
            modal: document.getElementById('postModal'),
            form: document.getElementById('postForm'),
            fileInput: document.getElementById('fileUpload'),
            fileUploadArea: document.getElementById('fileUploadArea'),
            filePreview: document.getElementById('filePreview'),
            notification: document.getElementById('notification'),
            selectedFile: null,
            isSubmitting: false
        };

        this.elements = {
            postCreatorTrigger: document.querySelector('.post-creator__trigger'),
            modalClose: document.querySelector('.modal__close'),
            cancelBtn: document.getElementById('cancelBtn'),
            publishBtn: document.getElementById('publishBtn'),
            fileRemoveBtn: document.querySelector('.file-preview__remove'),
            postsLoader: document.getElementById('postsLoader')
        };

        this.init();
    }

    init() {
        this.bindEvents();
        this.initializeAccessibility();
        this.hideLoader();
    }

    bindEvents() {
        // Modal Events
        this.elements.postCreatorTrigger?.addEventListener('click', this.openModal.bind(this));
        this.elements.postCreatorTrigger?.addEventListener('keydown', this.handleTriggerKeydown.bind(this));
        this.elements.modalClose?.addEventListener('click', this.closeModal.bind(this));
        this.elements.cancelBtn?.addEventListener('click', this.closeModal.bind(this));
        this.state.modal?.addEventListener('click', this.handleModalBackdropClick.bind(this));

        // Form Events
        this.state.form?.addEventListener('submit', this.handleSubmit.bind(this));

        // File Upload Events
        this.state.fileInput?.addEventListener('change', this.handleFileSelect.bind(this));
        this.state.fileUploadArea?.addEventListener('dragover', this.handleDragOver.bind(this));
        this.state.fileUploadArea?.addEventListener('dragleave', this.handleDragLeave.bind(this));
        this.state.fileUploadArea?.addEventListener('drop', this.handleFileDrop.bind(this));
        this.elements.fileRemoveBtn?.addEventListener('click', this.removeFile.bind(this));

        // Post Action Events
        document.querySelectorAll('.post-action').forEach(button => {
            button.addEventListener('click', this.handlePostAction.bind(this));
        });

        // Global Events
        document.addEventListener('keydown', this.handleGlobalKeydown.bind(this));
        window.addEventListener('beforeunload', this.handleBeforeUnload.bind(this));
    }

    initializeAccessibility() {
        // Set initial ARIA states
        this.state.modal?.setAttribute('aria-hidden', 'true');
        
        // Focus management
        this.focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
    }

    // Modal Management
    openModal() {
        this.state.modal?.classList.add('modal--active');
        this.state.modal?.setAttribute('aria-hidden', 'false');
        document.body.style.overflow = 'hidden';
        
        // Focus management
        setTimeout(() => {
            document.getElementById('postTitle')?.focus();
        }, 150);

        this.trapFocus();
    }

    closeModal() {
        this.state.modal?.classList.remove('modal--active');
        this.state.modal?.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
        
        this.resetForm();
        this.elements.postCreatorTrigger?.focus();
    }

    handleModalBackdropClick(event) {
        if (event.target === this.state.modal) {
            this.closeModal();
        }
    }

    handleTriggerKeydown(event) {
        if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            this.openModal();
        }
    }

    handleGlobalKeydown(event) {
        if (event.key === 'Escape' && this.state.modal?.classList.contains('modal--active')) {
            this.closeModal();
        }
    }

    trapFocus() {
        const focusableElements = this.state.modal?.querySelectorAll(this.focusableElements);
        const firstElement = focusableElements?.[0];
        const lastElement = focusableElements?.[focusableElements.length - 1];

        this.state.modal?.addEventListener('keydown', (event) => {
            if (event.key === 'Tab') {
                if (event.shiftKey) {
                    if (document.activeElement === firstElement) {
                        event.preventDefault();
                        lastElement?.focus();
                    }
                } else {
                    if (document.activeElement === lastElement) {
                        event.preventDefault();
                        firstElement?.focus();
                    }
                }
            }
        });
    }

    // Form Management
    resetForm() {
        this.state.form?.reset();
        this.removeFile();
        this.clearValidationErrors();
        this.state.isSubmitting = false;
        this.updateSubmitButton(false);
    }

    async handleSubmit(event) {
        event.preventDefault();

        if (this.state.isSubmitting) return;

        const formData = this.validateForm();
        if (!formData.isValid) {
            this.displayValidationErrors(formData.errors);
            return;
        }

        this.state.isSubmitting = true;
        this.updateSubmitButton(true);

        try {
            // Create FormData for submission
            const submitData = new FormData(this.state.form);

             //Uncomment for actual submission
             const response = await fetch(this.state.form.action, {
                 method: 'POST',
                 body: submitData,
                 credentials: 'include'
             });
             if (!response.ok) {
                 throw new Error(`HTTP error! status: ${response.status}`);
             }

            // Simulate API call for demo
            await this.delay(2000);

            this.showNotification('Post published successfully!', 'success');
            this.closeModal();

            // For actual implementation, you might want to:
            // window.location.reload();
            // or update the posts feed dynamically

        } catch (error) {
            console.error('Error submitting post:', error);
            this.showNotification('Failed to publish post. Please try again.', 'error');
        } finally {
            this.state.isSubmitting = false;
            this.updateSubmitButton(false);
        }
    }

    validateForm() {
        const title = document.getElementById('postTitle')?.value.trim();
        const content = document.getElementById('postContent')?.value.trim();
        const file = this.state.selectedFile;

        const errors = {};

        if (!title) {
            errors.title = 'Title is required';
        } else if (title.length > 100) {
            errors.title = 'Title must be less than 100 characters';
        }

        if (!content) {
            errors.content = 'Content is required';
        } else if (content.length > 1000) {
            errors.content = 'Content must be less than 1000 characters';
        }

        if (!file) {
            errors.file = 'Please select an image';
        }

        return {
            isValid: Object.keys(errors).length === 0,
            errors
        };
    }

    displayValidationErrors(errors) {
        this.clearValidationErrors();

        Object.keys(errors).forEach(field => {
            const errorElement = document.getElementById(`${field === 'file' ? 'file' : field}-error`);
            const inputElement = document.getElementById(field === 'file' ? 'fileUpload' : `post${field.charAt(0).toUpperCase() + field.slice(1)}`);

            if (errorElement) {
                errorElement.textContent = errors[field];
                errorElement.style.color = 'var(--error)';
                errorElement.style.fontSize = '0.875rem';
                errorElement.style.marginTop = '0.25rem';
            }

            if (inputElement) {
                inputElement.style.borderColor = 'var(--error)';
                inputElement.setAttribute('aria-invalid', 'true');
            }
        });
    }

    clearValidationErrors() {
        document.querySelectorAll('.form-error').forEach(error => {
            error.textContent = '';
        });

        document.querySelectorAll('.form-control').forEach(input => {
            input.style.borderColor = '';
            input.removeAttribute('aria-invalid');
        });
    }

    updateSubmitButton(loading) {
        const btn = this.elements.publishBtn;
        if (!btn) return;

        if (loading) {
            btn.disabled = true;
            btn.classList.add('btn--loading');
            btn.innerHTML = `
                <div class="loader" style="width: 18px; height: 18px; margin: 0;"></div>
                <span>Publishing...</span>
            `;
        } else {
            btn.disabled = false;
            btn.classList.remove('btn--loading');
            btn.innerHTML = `
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                </svg>
                <span>Publish Post</span>
            `;
        }
    }

    // File Management
    handleFileSelect(event) {
        const file = event.target.files?.[0];
        if (file) {
            this.processFile(file);
        }
    }

    handleDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        this.state.fileUploadArea?.classList.add('file-upload--dragover');
    }

    handleDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.state.fileUploadArea?.classList.remove('file-upload--dragover');
    }

    handleFileDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        this.state.fileUploadArea?.classList.remove('file-upload--dragover');

        const files = event.dataTransfer?.files;
        if (files?.length > 0) {
            this.processFile(files[0]);
        }
    }

    processFile(file) {
        // Validate file type
        if (!file.type.startsWith('image/')) {
            this.showNotification('Please select an image file', 'error');
            return;
        }

        // Validate file size (5MB)
        if (file.size > 5 * 1024 * 1024) {
            this.showNotification('File size must be less than 5MB', 'error');
            return;
        }

        this.state.selectedFile = file;
        this.showFilePreview(file);

        // Update the file input
        const dt = new DataTransfer();
        dt.items.add(file);
        if (this.state.fileInput) {
            this.state.fileInput.files = dt.files;
        }
    }

    showFilePreview(file) {
        const fileName = document.getElementById('fileName');
        const fileSize = document.getElementById('fileSize');

        if (fileName) fileName.textContent = file.name;
        if (fileSize) fileSize.textContent = this.formatFileSize(file.size);

        this.state.filePreview?.classList.add('file-preview--active');
        if (this.state.fileUploadArea) {
            this.state.fileUploadArea.style.display = 'none';
        }
    }

    removeFile() {
        this.state.selectedFile = null;
        this.state.filePreview?.classList.remove('file-preview--active');
        
        if (this.state.fileUploadArea) {
            this.state.fileUploadArea.style.display = 'block';
        }
        
        if (this.state.fileInput) {
            this.state.fileInput.value = '';
        }
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Post Actions
    handlePostAction(event) {
        const button = event.currentTarget;
        const action = button.getAttribute('data-action');
        const postId = button.getAttribute('data-post-id');

        switch (action) {
            case 'like':
                this.toggleLike(button, postId);
                break;
            case 'comment':
                this.handleComment(button, postId);
                break;
            case 'share':
                this.handleShare(button, postId);
                break;
        }
    }

    async toggleLike(button, postId) {
        button.classList.toggle('post-action--liked');
        
        // Animate the like button
        const icon = button.querySelector('.post-action__icon');
        if (icon) {
            icon.style.transform = 'scale(1.2)';
            setTimeout(() => {
                icon.style.transform = '';
            }, 200);
        }

        // In a real app, make API call here
        try {
            // const response = await fetch(`/api/posts/${postId}/like`, {
            //     method: 'POST',
            //     credentials: 'include'
            // });
            console.log('Like toggled for post:', postId);
        } catch (error) {
            console.error('Error toggling like:', error);
            button.classList.toggle('post-action--liked'); // Revert on error
        }
    }

    handleComment(button, postId) {
        // In a real app, this would open a comment modal or navigate to post detail
        console.log('Comment on post:', postId);
    }

    async handleShare(button, postId) {
        const url = `${window.location.origin}/posts/${postId}`;
        
        if (navigator.share) {
            try {
                await navigator.share({
                    title: 'Check out this post',
                    url: url
                });
            } catch (error) {
                if (error.name !== 'AbortError') {
                    this.copyToClipboard(url);
                }
            }
        } else {
            this.copyToClipboard(url);
        }
    }

    async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            this.showNotification('Link copied to clipboard!', 'success');
        } catch (error) {
            console.error('Failed to copy to clipboard:', error);
            this.showNotification('Failed to copy link', 'error');
        }
    }

    // Notification System
    showNotification(message, type = 'success') {
        const notification = this.state.notification;
        const textElement = document.getElementById('notificationText');
        
        if (!notification || !textElement) return;

        // Update content
        textElement.textContent = message;
        
        // Update styling
        notification.className = `notification notification--${type}`;
        
        // Show notification
        notification.classList.add('notification--active');
        
        // Hide after delay
        setTimeout(() => {
            notification.classList.remove('notification--active');
        }, 4000);
    }

    // Utility Methods
    hideLoader() {
        setTimeout(() => {
            this.elements.postsLoader?.classList.remove('loading-state--active');
        }, 800);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    handleBeforeUnload(event) {
        if (this.state.isSubmitting) {
            event.preventDefault();
            event.returnValue = '';
        }
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    new ProfessionalCommunityPosts();
});

// Add progressive enhancement for CSS animations
document.documentElement.style.setProperty('--animation-state', 'running');
</script>