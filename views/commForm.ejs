<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Community - VirtuHub</title>
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #A82400;
            --primary-dark: #8A1E00;
            --secondary-color: #D63A0D;
            --accent-color: #FFEBCD;
            --bg-color: #FFEBCD;
            --card-bg: #FFF5E6;
            --hover-bg: #FFE4CC;
            --text-primary: #A82400;
            --text-secondary: #6B4423;
            --text-dark: #3A2317;
            --white: #FFFFFF;
            --error: #DC2626;
            --success: #059669;
            --warning: #F59E0B;
            --shadow-sm: 0 2px 4px rgba(168, 36, 0, 0.08);
            --shadow-md: 0 4px 12px rgba(168, 36, 0, 0.12);
            --shadow-lg: 0 8px 24px rgba(168, 36, 0, 0.16);
            --radius-sm: 8px;
            --radius-md: 12px;
            --radius-lg: 16px;
            --radius-xl: 24px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Plus Jakarta Sans', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: var(--bg-color);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            position: relative;
            overflow-x: hidden;
        }

        /* Background Decoration */
        .bg-decoration {
            position: fixed;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
            overflow: hidden;
        }

        .bg-shape {
            position: absolute;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            opacity: 0.05;
        }

        .bg-shape:nth-child(1) {
            width: 300px;
            height: 300px;
            top: -150px;
            right: -150px;
            animation: float 25s infinite ease-in-out;
        }

        .bg-shape:nth-child(2) {
            width: 200px;
            height: 200px;
            bottom: -100px;
            left: -100px;
            animation: float 20s infinite ease-in-out reverse;
        }

        .bg-shape:nth-child(3) {
            width: 150px;
            height: 150px;
            top: 30%;
            left: 10%;
            animation: pulse 6s infinite ease-in-out;
        }

        @keyframes float {
            0%, 100% { transform: translate(0, 0) rotate(0deg); }
            33% { transform: translate(20px, -20px) rotate(120deg); }
            66% { transform: translate(-15px, 15px) rotate(240deg); }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.05; }
            50% { transform: scale(1.1); opacity: 0.08; }
        }

        /* Header */
        .header {
            background: var(--white);
            box-shadow: var(--shadow-sm);
            position: relative;
            z-index: 100;
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            text-decoration: none;
            color: var(--primary-color);
            transition: all 0.3s ease;
        }

        .brand:hover {
            transform: translateX(5px);
        }

        .brand-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            transition: all 0.3s ease;
        }

        .brand:hover .brand-icon {
            transform: rotate(10deg) scale(1.1);
        }

        .brand-text {
            font-weight: 700;
            font-size: 1.25rem;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .header-link {
            color: var(--text-secondary);
            text-decoration: none;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: var(--radius-sm);
            transition: all 0.3s ease;
        }

        .header-link:hover {
            background: var(--hover-bg);
            color: var(--primary-color);
        }

        /* Main Content */
        .main-container {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            position: relative;
            z-index: 10;
        }

        .form-card {
            background: var(--white);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            width: 100%;
            max-width: 550px;
            overflow: hidden;
            position: relative;
            animation: fadeInUp 0.6s ease-out;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .form-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            padding: 2rem;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .form-header::before {
            content: '';
            position: absolute;
            width: 150px;
            height: 150px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            top: -75px;
            right: -75px;
        }

        .form-title {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            position: relative;
        }

        .form-subtitle {
            font-size: 1rem;
            opacity: 0.9;
            position: relative;
        }

        .form-body {
            padding: 2rem;
        }

        /* Progress Indicator */
        .progress-bar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2rem;
            position: relative;
        }

        .progress-bar::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 2px;
            background: var(--hover-bg);
            transform: translateY(-50%);
            z-index: 0;
        }

        .progress-line {
            position: absolute;
            top: 50%;
            left: 0;
            height: 2px;
            background: var(--primary-color);
            transform: translateY(-50%);
            z-index: 1;
            transition: width 0.5s ease;
        }

        .progress-step {
            position: relative;
            z-index: 2;
            width: 40px;
            height: 40px;
            background: var(--hover-bg);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: var(--text-secondary);
            transition: all 0.3s ease;
        }

        .progress-step.active {
            background: var(--primary-color);
            color: var(--white);
            transform: scale(1.1);
        }

        .progress-step.completed {
            background: var(--success);
            color: var(--white);
        }

        .progress-step.completed::after {
            content: '✓';
            position: absolute;
            font-size: 1.2rem;
        }

        /* Form Steps */
        .form-step {
            display: none;
            animation: slideIn 0.4s ease-out;
        }

        .form-step.active {
            display: block;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .input-group {
            margin-bottom: 1.5rem;
        }

        .input-label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-dark);
            font-weight: 600;
            font-size: 0.875rem;
        }

        .input-wrapper {
            position: relative;
        }

        .input-field {
            width: 100%;
            padding: 0.875rem 1rem;
            padding-left: 3rem;
            border: 2px solid var(--hover-bg);
            border-radius: var(--radius-md);
            font-size: 1rem;
            font-family: inherit;
            background: var(--white);
            transition: all 0.3s ease;
            resize: vertical;
        }

        .input-field:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(168, 36, 0, 0.1);
            transform: translateY(-2px);
        }

        .input-field:hover {
            border-color: var(--secondary-color);
        }

        .input-field.error {
            border-color: var(--error);
            box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 0.875rem;
            color: var(--text-secondary);
            transition: color 0.3s ease;
        }

        .input-field:focus ~ .input-icon {
            color: var(--primary-color);
        }

        .input-field.error ~ .input-icon {
            color: var(--error);
        }

        /* File Upload */
        .file-upload-area {
            border: 2px dashed var(--hover-bg);
            border-radius: var(--radius-md);
            padding: 2rem;
            text-align: center;
            background: var(--card-bg);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .file-upload-area:hover {
            border-color: var(--primary-color);
            background: var(--hover-bg);
        }

        .file-upload-area.dragover {
            border-color: var(--primary-color);
            background: var(--hover-bg);
            transform: scale(1.02);
        }

        .file-upload-area input[type="file"] {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            opacity: 0;
            cursor: pointer;
        }

        .upload-icon {
            font-size: 3rem;
            color: var(--text-secondary);
            margin-bottom: 1rem;
        }

        .upload-text {
            color: var(--text-dark);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .upload-subtext {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .file-preview {
            display: none;
            align-items: center;
            gap: 1rem;
            background: var(--card-bg);
            padding: 1rem;
            border-radius: var(--radius-md);
            margin-top: 1rem;
        }

        .file-preview.show {
            display: flex;
        }

        .file-info {
            flex: 1;
        }

        .file-name {
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 0.25rem;
        }

        .file-size {
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        .file-remove {
            background: var(--error);
            color: var(--white);
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .file-remove:hover {
            background: #B91C1C;
            transform: scale(1.1);
        }

        /* Error Message */
        .error-message {
            color: var(--error);
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: none;
        }

        .error-message.show {
            display: block;
            animation: shake 0.3s ease;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        /* Navigation Buttons */
        .form-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            gap: 1rem;
        }

        .btn {
            padding: 0.875rem 1.5rem;
            border: none;
            border-radius: var(--radius-md);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.95rem;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            flex: 1;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.2);
            transition: left 0.5s ease;
        }

        .btn-primary:hover::before {
            left: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(168, 36, 0, 0.3);
        }

        .btn-secondary {
            background: transparent;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            padding: 0.75rem 1.5rem;
        }

        .btn-secondary:hover {
            background: var(--primary-color);
            color: var(--white);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .btn:disabled:hover {
            transform: none !important;
            box-shadow: none !important;
        }

        /* Loading State */
        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid var(--white);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .btn.loading .btn-text {
            display: none;
        }

        .btn.loading .loading-spinner {
            display: block;
        }

        /* Success State */
        .success-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(5, 150, 105, 0.1);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            backdrop-filter: blur(4px);
        }

        .success-message {
            background: var(--white);
            padding: 2rem;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            text-align: center;
            animation: scaleIn 0.5s ease-out;
            max-width: 400px;
            margin: 1rem;
        }

        @keyframes scaleIn {
            from {
                opacity: 0;
                transform: scale(0.8);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .header-content {
                padding: 1rem;
            }

            .main-container {
                padding: 1rem;
            }

            .form-card {
                max-width: 100%;
            }

            .form-header {
                padding: 1.5rem;
            }

            .form-body {
                padding: 1.5rem;
            }

            .progress-bar {
                margin-bottom: 1.5rem;
            }

            .progress-step {
                width: 35px;
                height: 35px;
                font-size: 0.875rem;
            }
        }

        @media (max-width: 480px) {
            .form-title {
                font-size: 1.5rem;
            }

            .form-actions {
                flex-direction: column-reverse;
            }

            .btn {
                width: 100%;
            }

            .btn-secondary {
                width: 100%;
            }

            .file-upload-area {
                padding: 1.5rem;
            }

            .upload-icon {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="bg-decoration">
        <div class="bg-shape"></div>
        <div class="bg-shape"></div>
        <div class="bg-shape"></div>
    </div>

    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <a href="/community" class="brand">
                <div class="brand-icon">🏘️</div>
                <span class="brand-text">VirtuHub</span>
            </a>
            <div class="header-actions">
                <a href="/community" class="header-link">← Back to Communities</a>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-container">
        <div class="form-card">
            <div class="form-header">
                <h1 class="form-title">Create Community</h1>
                <p class="form-subtitle">Build your own virtual space</p>
            </div>

            <div class="form-body">
                <!-- Progress Bar -->
                <div class="progress-bar">
                    <div class="progress-line" id="progressLine"></div>
                    <div class="progress-step active" id="progress1">1</div>
                    <div class="progress-step" id="progress2">2</div>
                    <div class="progress-step" id="progress3">3</div>
                    <div class="progress-step" id="progress4">4</div>
                </div>

                <form id="communityForm" action="/communityForm" method="post" enctype="multipart/form-data" novalidate>
                    <!-- Step 1: Community Name -->
                    <div id="step1" class="form-step active">
                        <div class="input-group">
                            <label for="communityName" class="input-label">Community Name</label>
                            <div class="input-wrapper">
                                <input 
                                    type="text" 
                                    id="communityName"
                                    name="community[title]" 
                                    class="input-field" 
                                    placeholder="Enter community name"
                                    required
                                    maxlength="50"
                                    aria-describedby="nameError"
                                >
                                <svg class="input-icon" width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                </svg>
                            </div>
                            <span class="error-message" id="nameError" role="alert">Community name is required</span>
                        </div>

                        <div class="form-actions">
                            <div></div>
                            <button type="button" class="btn btn-primary" id="step1Next">
                                <span class="btn-text">Next</span>
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Step 2: Community Description -->
                    <div id="step2" class="form-step">
                        <div class="input-group">
                            <label for="communityDescription" class="input-label">Community Description</label>
                            <div class="input-wrapper">
                                <textarea 
                                    id="communityDescription"
                                    name="community[description]" 
                                    class="input-field" 
                                    rows="5" 
                                    placeholder="Describe your community's purpose and goals"
                                    required
                                    maxlength="500"
                                    aria-describedby="descriptionError"
                                ></textarea>
                                <svg class="input-icon" width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                            </div>
                            <span class="error-message" id="descriptionError" role="alert">Community description is required</span>
                        </div>

                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" id="step2Back">
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 17l-5-5m0 0l5-5m-5 5h12"></path>
                                </svg>
                                <span class="btn-text">Back</span>
                            </button>
                            <button type="button" class="btn btn-primary" id="step2Next">
                                <span class="btn-text">Next</span>
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Step 3: Community Thumbnail -->
                    <div id="step3" class="form-step">
                        <div class="input-group">
                            <label class="input-label">Community Thumbnail</label>
                            <div class="file-upload-area" id="fileUploadArea">
                                <input 
                                    type="file" 
                                    id="communityThumbnail"
                                    name="community[thumbnail]" 
                                    accept="image/*" 
                                    required
                                    aria-describedby="thumbnailError"
                                >
                                <div class="upload-icon">📷</div>
                                <div class="upload-text">Click to upload or drag and drop</div>
                                <div class="upload-subtext">PNG, JPG, GIF up to 5MB</div>
                            </div>
                            <div class="file-preview" id="filePreview">
                                <div class="file-info">
                                    <div class="file-name" id="fileName"></div>
                                    <div class="file-size" id="fileSize"></div>
                                </div>
                                <button type="button" class="file-remove" id="fileRemove">×</button>
                            </div>
                            <span class="error-message" id="thumbnailError" role="alert">Community thumbnail is required</span>
                        </div>

                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" id="step3Back">
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 17l-5-5m0 0l5-5m-5 5h12"></path>
                                </svg>
                                <span class="btn-text">Back</span>
                            </button>
                            <button type="button" class="btn btn-primary" id="step3Next">
                                <span class="btn-text">Next</span>
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Step 4: Community Admin -->
                    <div id="step4" class="form-step">
                        <div class="input-group">
                            <label for="communityAdmin" class="input-label">Community Admin</label>
                            <div class="input-wrapper">
                                <input 
                                    type="text" 
                                    id="communityAdmin"
                                    name="community[admin]" 
                                    class="input-field" 
                                    placeholder="Enter admin name"
                                    required
                                    maxlength="50"
                                    aria-describedby="adminError"
                                >
                                <svg class="input-icon" width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                            </div>
                            <span class="error-message" id="adminError" role="alert">Admin name is required</span>
                        </div>

                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" id="step4Back">
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 17l-5-5m0 0l5-5m-5 5h12"></path>
                                </svg>
                                <span class="btn-text">Back</span>
                            </button>
                            <button type="submit" class="btn btn-primary" id="submitBtn">
                                <span class="btn-text">Create Community</span>
                                <div class="loading-spinner"></div>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <!-- Success Overlay -->
    <div class="success-overlay" id="successOverlay">
        <div class="success-message">
            <svg width="64" height="64" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: var(--success); margin-bottom: 1rem;">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <h2 style="color: var(--text-dark); margin-bottom: 0.5rem;">Community Created!</h2>
            <p style="color: var(--text-secondary);">Your community has been successfully created.</p>
        </div>
    </div>

    <script>
        class CommunityForm {
            constructor() {
                this.currentStep = 1;
                this.totalSteps = 4;
                this.form = document.getElementById('communityForm');
                this.selectedFile = null;
                this.initializeEventListeners();
                this.updateProgressBar();
                this.focusFirstField();
            }

            initializeEventListeners() {
                // Form submission
                this.form.addEventListener('submit', this.handleSubmit.bind(this));

                // Navigation buttons
                document.getElementById('step1Next').addEventListener('click', () => this.validateAndNext(1));
                document.getElementById('step2Next').addEventListener('click', () => this.validateAndNext(2));
                document.getElementById('step3Next').addEventListener('click', () => this.validateAndNext(3));
                
                document.getElementById('step2Back').addEventListener('click', () => this.goToStep(1));
                document.getElementById('step3Back').addEventListener('click', () => this.goToStep(2));
                document.getElementById('step4Back').addEventListener('click', () => this.goToStep(3));

                // Input validation
                document.getElementById('communityName').addEventListener('input', this.validateName.bind(this));
                document.getElementById('communityDescription').addEventListener('input', this.validateDescription.bind(this));
                document.getElementById('communityAdmin').addEventListener('input', this.validateAdmin.bind(this));

                // File upload
                this.initializeFileUpload();

                // Keyboard navigation
                document.addEventListener('keydown', this.handleKeyboard.bind(this));

                // Enter key navigation
                document.getElementById('communityName').addEventListener('keypress', this.handleEnterKey.bind(this));
                document.getElementById('communityDescription').addEventListener('keypress', this.handleEnterKey.bind(this));
                document.getElementById('communityAdmin').addEventListener('keypress', this.handleEnterKey.bind(this));
            }

            initializeFileUpload() {
                const fileInput = document.getElementById('communityThumbnail');
                const uploadArea = document.getElementById('fileUploadArea');
                const filePreview = document.getElementById('filePreview');
                const fileRemove = document.getElementById('fileRemove');

                // File input change
                fileInput.addEventListener('change', this.handleFileSelect.bind(this));

                // Drag and drop
                uploadArea.addEventListener('dragover', this.handleDragOver.bind(this));
                uploadArea.addEventListener('dragleave', this.handleDragLeave.bind(this));
                uploadArea.addEventListener('drop', this.handleFileDrop.bind(this));

                // Remove file
                fileRemove.addEventListener('click', this.removeFile.bind(this));
            }

            validateName(event) {
                const name = event.target.value.trim();
                if (name.length === 0) {
                    this.showError('name', 'Community name is required');
                    return false;
                } else if (name.length < 3) {
                    this.showError('name', 'Community name must be at least 3 characters');
                    return false;
                } else {
                    this.clearError('name');
                    return true;
                }
            }

            validateDescription(event) {
                const description = event.target.value.trim();
                if (description.length === 0) {
                    this.showError('description', 'Community description is required');
                    return false;
                } else if (description.length < 10) {
                    this.showError('description', 'Description must be at least 10 characters');
                    return false;
                } else {
                    this.clearError('description');
                    return true;
                }
            }

            validateAdmin(event) {
                const admin = event.target.value.trim();
                if (admin.length === 0) {
                    this.showError('admin', 'Admin name is required');
                    return false;
                } else if (admin.length < 2) {
                    this.showError('admin', 'Admin name must be at least 2 characters');
                    return false;
                } else {
                    this.clearError('admin');
                    return true;
                }
            }

            validateThumbnail() {
                if (!this.selectedFile) {
                    this.showError('thumbnail', 'Community thumbnail is required');
                    return false;
                } else {
                    this.clearError('thumbnail');
                    return true;
                }
            }

            showError(fieldId, message) {
                const errorElement = document.getElementById(fieldId + 'Error');
                const inputElement = document.getElementById('community' + fieldId.charAt(0).toUpperCase() + fieldId.slice(1)) || 
                                   document.getElementById('communityThumbnail');
                
                if (errorElement) {
                    errorElement.textContent = message;
                    errorElement.classList.add('show');
                }
                
                if (inputElement) {
                    inputElement.classList.add('error');
                }
            }

            clearError(fieldId) {
                const errorElement = document.getElementById(fieldId + 'Error');
                const inputElement = document.getElementById('community' + fieldId.charAt(0).toUpperCase() + fieldId.slice(1)) || 
                                   document.getElementById('communityThumbnail');
                
                if (errorElement) {
                    errorElement.classList.remove('show');
                }
                
                if (inputElement) {
                    inputElement.classList.remove('error');
                }
            }

            validateAndNext(step) {
                let isValid = true;

                switch (step) {
                    case 1:
                        isValid = this.validateName({ target: document.getElementById('communityName') });
                        break;
                    case 2:
                        isValid = this.validateDescription({ target: document.getElementById('communityDescription') });
                        break;
                    case 3:
                        isValid = this.validateThumbnail();
                        break;
                }

                if (isValid) {
                    this.goToStep(step + 1);
                } else {
                    // Focus on the invalid field
                    const invalidField = document.querySelector(`#step${step} .input-field.error`);
                    if (invalidField) {
                        invalidField.focus();
                    }
                }
            }

            goToStep(step) {
                if (step < 1 || step > this.totalSteps) return;

                // Hide current step
                document.getElementById(`step${this.currentStep}`).classList.remove('active');
                
                // Update progress
                if (step > this.currentStep) {
                    document.getElementById(`progress${this.currentStep}`).classList.add('completed');
                    document.getElementById(`progress${this.currentStep}`).classList.remove('active');
                } else {
                    for (let i = step; i <= this.totalSteps; i++) {
                        document.getElementById(`progress${i}`).classList.remove('completed');
                    }
                }

                // Show new step
                this.currentStep = step;
                document.getElementById(`step${this.currentStep}`).classList.add('active');
                document.getElementById(`progress${this.currentStep}`).classList.add('active');

                // Update progress bar
                this.updateProgressBar();

                // Focus on first input of new step
                setTimeout(() => {
                    const firstInput = document.querySelector(`#step${this.currentStep} .input-field`);
                    if (firstInput && firstInput.type !== 'file') {
                        firstInput.focus();
                    }
                }, 300);
            }

            updateProgressBar() {
                const progressLine = document.getElementById('progressLine');
                const progressPercentage = ((this.currentStep - 1) / (this.totalSteps - 1)) * 100;
                progressLine.style.width = `${progressPercentage}%`;
            }

            handleFileSelect(event) {
                const file = event.target.files[0];
                if (file) {
                    this.processFile(file);
                }
            }

            handleDragOver(event) {
                event.preventDefault();
                event.stopPropagation();
                document.getElementById('fileUploadArea').classList.add('dragover');
            }

            handleDragLeave(event) {
                event.preventDefault();
                event.stopPropagation();
                document.getElementById('fileUploadArea').classList.remove('dragover');
            }

            handleFileDrop(event) {
                event.preventDefault();
                event.stopPropagation();
                document.getElementById('fileUploadArea').classList.remove('dragover');

                const files = event.dataTransfer.files;
                if (files.length > 0) {
                    this.processFile(files[0]);
                }
            }

            processFile(file) {
                // Validate file type
                if (!file.type.startsWith('image/')) {
                    this.showError('thumbnail', 'Please select an image file');
                    return;
                }

                // Validate file size (5MB)
                if (file.size > 5 * 1024 * 1024) {
                    this.showError('thumbnail', 'File size must be less than 5MB');
                    return;
                }

                this.selectedFile = file;
                this.showFilePreview(file);
                this.clearError('thumbnail');

                // Update the file input
                const fileInput = document.getElementById('communityThumbnail');
                const dt = new DataTransfer();
                dt.items.add(file);
                fileInput.files = dt.files;
            }

            showFilePreview(file) {
                const filePreview = document.getElementById('filePreview');
                const fileName = document.getElementById('fileName');
                const fileSize = document.getElementById('fileSize');

                fileName.textContent = file.name;
                fileSize.textContent = this.formatFileSize(file.size);
                filePreview.classList.add('show');
            }

            removeFile() {
                this.selectedFile = null;
                document.getElementById('filePreview').classList.remove('show');
                document.getElementById('communityThumbnail').value = '';
                this.clearError('thumbnail');
            }

            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            async handleSubmit(event) {
                event.preventDefault();

                // Final validation
                const nameValid = this.validateName({ target: document.getElementById('communityName') });
                const descriptionValid = this.validateDescription({ target: document.getElementById('communityDescription') });
                const thumbnailValid = this.validateThumbnail();
                const adminValid = this.validateAdmin({ target: document.getElementById('communityAdmin') });

                if (!nameValid) {
                    this.goToStep(1);
                    return;
                }
                if (!descriptionValid) {
                    this.goToStep(2);
                    return;
                }
                if (!thumbnailValid) {
                    this.goToStep(3);
                    return;
                }
                if (!adminValid) {
                    this.goToStep(4);
                    return;
                }

                // Show loading state
                this.setLoadingState(true);

                try {
                    // Create FormData for submission
                    const formData = new FormData(this.form);

                    // Submit form (uncomment for actual submission)
                     const response = await fetch('this.action.', {
                        method: 'POST',
                        body: formData
                    })
                    if (!response.ok) {
                        throw new Error('Failed to create community');
                    }

                    // Simulate API call for demo
                    await new Promise(resolve => setTimeout(resolve, 2000));

                    // Show success message
                    this.showSuccess();

                    // Redirect after success
                    setTimeout(() => {
                        // For actual implementation, uncomment the next line:
                        // window.location.href = '/community';
                        console.log('Redirecting to /community');
                    }, 2000);

                } catch (error) {
                    console.error('Failed to create community:', error);
                    this.handleSubmitError(error);
                } finally {
                    this.setLoadingState(false);
                }
            }

            setLoadingState(loading) {
                const submitBtn = document.getElementById('submitBtn');
                const backBtn = document.getElementById('step4Back');
                
                if (loading) {
                    submitBtn.classList.add('loading');
                    submitBtn.disabled = true;
                    backBtn.disabled = true;
                } else {
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                    backBtn.disabled = false;
                }
            }

            showSuccess() {
                document.getElementById('successOverlay').style.display = 'flex';
            }

            handleSubmitError(error) {
                let errorMessage = 'Failed to create community. Please try again.';
                
                if (error.message.includes('network')) {
                    errorMessage = 'Network error. Please check your connection.';
                } else if (error.message.includes('timeout')) {
                    errorMessage = 'Request timed out. Please try again.';
                }

                // Show error on current step
                const currentStepField = document.querySelector(`#step${this.currentStep} .input-field`);
                if (currentStepField) {
                    this.showError('admin', errorMessage);
                }
            }

            handleEnterKey(event) {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    
                    // Find the next button for current step
                    const nextButton = document.querySelector(`#step${this.currentStep} .btn-primary`);
                    if (nextButton) {
                        nextButton.click();
                    }
                }
            }

            handleKeyboard(event) {
                // Escape key to go back
                if (event.key === 'Escape' && this.currentStep > 1) {
                    this.goToStep(this.currentStep - 1);
                }

                // Arrow keys for navigation
                if (event.ctrlKey || event.metaKey) {
                    if (event.key === 'ArrowLeft' && this.currentStep > 1) {
                        event.preventDefault();
                        this.goToStep(this.currentStep - 1);
                    } else if (event.key === 'ArrowRight' && this.currentStep < this.totalSteps) {
                        event.preventDefault();
                        this.validateAndNext(this.currentStep);
                    }
                }
            }

            focusFirstField() {
                setTimeout(() => {
                    const firstInput = document.getElementById('communityName');
                    if (firstInput) {
                        firstInput.focus();
                    }
                }, 100);
            }
        }

        // Initialize the form when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new CommunityForm();

            // Add animation to brand icon on page load
            const brandIcon = document.querySelector('.brand-icon');
            if (brandIcon) {
                brandIcon.style.animation = 'pulse 2s ease-out';
                setTimeout(() => {
                    brandIcon.style.animation = '';
                }, 2000);
            }
        });

        // Prevent form resubmission on page refresh
        if (window.history.replaceState) {
            window.history.replaceState(null, null, window.location.href);
        }

        // Close success overlay when clicking outside
        document.getElementById('successOverlay').addEventListener('click', function(e) {
            if (e.target === this) {
                this.style.display = 'none';
            }
        });

        // Prevent file drag and drop on the entire page
        document.addEventListener('dragover', function(e) {
            e.preventDefault();
        });

        document.addEventListener('drop', function(e) {
            e.preventDefault();
        });
    </script>
</body>
</html>