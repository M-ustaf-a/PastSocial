<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join Community - VirtuHub</title>
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #A82400;
            --primary-dark: #8A1E00;
            --secondary-color: #D63A0D;
            --accent-color: #FFEBCD;
            --bg-color: #FFEBCD;
            --card-bg: #FFF5E6;
            --hover-bg: #FFE4CC;
            --text-primary: #A82400;
            --text-secondary: #6B4423;
            --text-dark: #3A2317;
            --white: #FFFFFF;
            --error: #DC2626;
            --success: #059669;
            --shadow-sm: 0 2px 4px rgba(168, 36, 0, 0.08);
            --shadow-md: 0 4px 12px rgba(168, 36, 0, 0.12);
            --shadow-lg: 0 8px 24px rgba(168, 36, 0, 0.16);
            --shadow-xl: 0 12px 48px rgba(168, 36, 0, 0.2);
            --radius-sm: 8px;
            --radius-md: 12px;
            --radius-lg: 16px;
            --radius-xl: 24px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Plus Jakarta Sans', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--bg-color);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            position: relative;
            overflow-x: hidden;
        }

        /* Background Design */
        .background-design {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
        }

        .bg-gradient {
            position: absolute;
            width: 100%;
            height: 100%;
            background: radial-gradient(ellipse at top right, rgba(168, 36, 0, 0.08) 0%, transparent 60%),
                        radial-gradient(ellipse at bottom left, rgba(214, 58, 13, 0.08) 0%, transparent 60%);
        }

        .bg-shapes {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .shape {
            position: absolute;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            opacity: 0.03;
            filter: blur(60px);
            animation: float 20s infinite ease-in-out;
        }

        .shape:nth-child(1) {
            width: 500px;
            height: 500px;
            border-radius: 50%;
            top: -250px;
            left: -250px;
            animation-duration: 25s;
        }

        .shape:nth-child(2) {
            width: 400px;
            height: 400px;
            border-radius: 40% 60% 70% 30%;
            bottom: -200px;
            right: -200px;
            animation-duration: 30s;
            animation-delay: -10s;
        }

        .shape:nth-child(3) {
            width: 300px;
            height: 300px;
            border-radius: 50%;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            animation-duration: 35s;
            animation-delay: -5s;
        }

        @keyframes float {
            0%, 100% {
                transform: translate(0, 0) rotate(0deg) scale(1);
            }
            33% {
                transform: translate(50px, -80px) rotate(120deg) scale(1.1);
            }
            66% {
                transform: translate(-50px, 50px) rotate(240deg) scale(0.9);
            }
        }

        /* Header */
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow-sm);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            text-decoration: none;
            color: var(--primary-color);
            transition: all 0.3s ease;
        }

        .brand:hover {
            transform: translateX(5px);
        }

        .brand-icon {
            width: 42px;
            height: 42px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: var(--radius-sm);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-sm);
        }

        .brand:hover .brand-icon {
            transform: rotate(10deg) scale(1.1);
            box-shadow: var(--shadow-md);
        }

        .brand-text {
            font-weight: 700;
            font-size: 1.25rem;
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .back-link {
            color: var(--text-secondary);
            text-decoration: none;
            font-weight: 500;
            padding: 0.6rem 1.2rem;
            border-radius: var(--radius-sm);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .back-link:hover {
            background: var(--hover-bg);
            color: var(--primary-color);
            transform: translateX(-3px);
        }

        .back-link svg {
            width: 20px;
            height: 20px;
            transition: transform 0.3s ease;
        }

        .back-link:hover svg {
            transform: translateX(-3px);
        }

        /* Main Container */
        .main-container {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 6rem 2rem 3rem;
            position: relative;
            z-index: 10;
        }

        /* Form Container */
        .form-wrapper {
            background: var(--white);
            border-radius: var(--radius-xl);
            box-shadow: var(--shadow-xl);
            overflow: hidden;
            max-width: 600px;
            width: 100%;
            position: relative;
            animation: fadeInScale 0.6s ease-out;
        }

        @keyframes fadeInScale {
            from {
                opacity: 0;
                transform: scale(0.95) translateY(30px);
            }
            to {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }

        /* Progress Bar */
        .progress-bar {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
        }

        .progress-bar::before {
            content: '';
            position: absolute;
            width: 200px;
            height: 200px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            top: -100px;
            right: -100px;
            animation: pulse 4s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
                opacity: 0.5;
            }
            50% {
                transform: scale(1.1);
                opacity: 0.3;
            }
        }

        .progress-content {
            position: relative;
            z-index: 1;
        }

        .progress-title {
            color: var(--white);
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .progress-steps {
            display: flex;
            justify-content: space-between;
            position: relative;
        }

        .progress-line {
            position: absolute;
            top: 20px;
            left: 0;
            right: 0;
            height: 2px;
            background: rgba(255, 255, 255, 0.2);
            z-index: 0;
        }

        .progress-line-fill {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            background: var(--white);
            transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            width: 0%;
        }

        .progress-step {
            position: relative;
            z-index: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
        }

        .step-circle {
            width: 40px;
            height: 40px;
            background: rgba(255, 255, 255, 0.2);
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: rgba(255, 255, 255, 0.6);
            transition: all 0.4s ease;
        }

        .progress-step.active .step-circle {
            background: var(--white);
            color: var(--primary-color);
            border-color: var(--white);
            transform: scale(1.1);
            box-shadow: 0 0 0 8px rgba(255, 255, 255, 0.2);
        }

        .progress-step.completed .step-circle {
            background: rgba(255, 255, 255, 0.9);
            color: var(--primary-color);
            border-color: rgba(255, 255, 255, 0.9);
        }

        .step-label {
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            white-space: nowrap;
        }

        .progress-step.active .step-label {
            color: var(--white);
            font-weight: 600;
        }

        /* Form Content */
        .form-content {
            padding: 3rem;
        }

        .form-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .form-title {
            font-size: 2rem;
            font-weight: 800;
            color: var(--text-dark);
            margin-bottom: 0.5rem;
            letter-spacing: -0.5px;
        }

        .form-subtitle {
            color: var(--text-secondary);
            font-size: 1.1rem;
        }

        /* Form Steps */
        .form-step {
            display: none;
            animation: slideIn 0.4s ease-out;
        }

        .form-step.active {
            display: block;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .form-group {
            margin-bottom: 1.75rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-dark);
            font-weight: 600;
            font-size: 0.95rem;
        }

        .form-label-hint {
            font-weight: 400;
            color: var(--text-secondary);
            font-size: 0.85rem;
            margin-left: 0.5rem;
        }

        .input-wrapper {
            position: relative;
        }

        .form-input {
            width: 100%;
            padding: 1rem 1.25rem;
            padding-left: 3.5rem;
            border: 2px solid var(--hover-bg);
            border-radius: var(--radius-md);
            font-size: 1rem;
            font-family: inherit;
            background: var(--white);
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(168, 36, 0, 0.1);
            transform: translateY(-1px);
        }

        .form-input:hover {
            border-color: var(--secondary-color);
        }

        .input-icon {
            position: absolute;
            left: 1.25rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
            transition: all 0.3s ease;
            width: 20px;
            height: 20px;
        }

        .form-input:focus ~ .input-icon {
            color: var(--primary-color);
            transform: translateY(-50%) scale(1.1);
        }

        /* Select styling */
        select.form-input {
            appearance: none;
            background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>');
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 20px;
            padding-right: 3rem;
        }

        textarea.form-input {
            resize: vertical;
            min-height: 120px;
            padding-top: 1rem;
            line-height: 1.5;
        }

        textarea ~ .input-icon {
            top: 1.5rem;
            transform: none;
        }

        textarea.form-input:focus ~ .input-icon {
            transform: scale(1.1);
        }

        /* File Upload */
        .file-upload-area {
            position: relative;
            border: 3px dashed var(--hover-bg);
            border-radius: var(--radius-lg);
            padding: 2.5rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            background: var(--card-bg);
            overflow: hidden;
        }

        .file-upload-area::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .file-upload-area:hover {
            border-color: var(--primary-color);
            background: var(--hover-bg);
            transform: translateY(-2px);
        }

        .file-upload-area:hover::before {
            opacity: 0.05;
        }

        .file-upload-area.has-file {
            border-style: solid;
            border-color: var(--success);
            background: rgba(5, 150, 105, 0.05);
        }

        .file-upload-area.has-error {
            border-color: var(--error);
            background: rgba(220, 38, 38, 0.05);
        }

        .file-input {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
            z-index: 2;
        }

        .upload-content {
            position: relative;
            z-index: 1;
        }

        .upload-icon {
            width: 60px;
            height: 60px;
            margin: 0 auto 1.5rem;
            color: var(--primary-color);
            opacity: 0.8;
            transition: all 0.3s ease;
        }

        .file-upload-area:hover .upload-icon {
            transform: scale(1.1) rotate(5deg);
            opacity: 1;
        }

        .upload-title {
            color: var(--text-dark);
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }

        .upload-subtitle {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .file-info {
            margin-top: 1rem;
            padding: 1rem;
            background: var(--white);
            border-radius: var(--radius-md);
            display: none;
        }

        .file-info.show {
            display: block;
            animation: fadeInUp 0.3s ease-out;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .file-name {
            color: var(--success);
            font-weight: 600;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .file-size {
            color: var(--text-secondary);
            font-size: 0.85rem;
            margin-top: 0.25rem;
        }

        /* Character Counter */
        .input-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0.5rem;
        }

        .char-counter {
            font-size: 0.85rem;
            color: var(--text-secondary);
            transition: color 0.3s ease;
        }

        .char-counter.warning {
            color: var(--error);
            font-weight: 500;
        }

        /* Form Actions */
        .form-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2.5rem;
            gap: 1rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--hover-bg);
        }

        .btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: var(--radius-md);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            position: relative;
            overflow: hidden;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            min-width: 140px;
            box-shadow: var(--shadow-md);
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s ease;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .btn-primary:hover::before {
            left: 100%;
        }

        .btn-primary:active {
            transform: translateY(0);
        }

        .btn-secondary {
            background: transparent;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            min-width: 100px;
        }

        .btn-secondary:hover {
            background: var(--primary-color);
            color: var(--white);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
            box-shadow: none !important;
        }

        .btn-icon {
            width: 20px;
            height: 20px;
            transition: transform 0.3s ease;
        }

        .btn:hover .btn-icon {
            transform: translateX(3px);
        }

        .btn-secondary:hover .btn-icon {
            transform: translateX(-3px);
        }

        /* Loading State */
        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top-color: var(--white);
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Error Messages */
        .error-message {
            color: var(--error);
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none;
            animation: shake 0.3s ease;
        }

        .error-message.show {
            display: block;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        .form-input.error {
            border-color: var(--error);
            animation: shake 0.3s ease;
        }

        /* Success State */
        .success-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }

        .success-card {
            background: var(--white);
            padding: 3rem;
            border-radius: var(--radius-xl);
            box-shadow: var(--shadow-xl);
            text-align: center;
            max-width: 450px;
            animation: successBounce 0.6s ease-out;
        }

        @keyframes successBounce {
            0% {
                opacity: 0;
                transform: scale(0.8) translateY(20px);
            }
            60% {
                transform: scale(1.05) translateY(-5px);
            }
            100% {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }

        .success-icon-wrapper {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, var(--success), #10B981);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 2rem;
            box-shadow: 0 0 0 12px rgba(5, 150, 105, 0.1);
            animation: successPulse 2s ease-in-out infinite;
        }

        @keyframes successPulse {
            0%, 100% {
                box-shadow: 0 0 0 12px rgba(5, 150, 105, 0.1);
            }
            50% {
                box-shadow: 0 0 0 20px rgba(5, 150, 105, 0);
            }
        }

        .success-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--text-dark);
            margin-bottom: 0.75rem;
        }

        .success-message {
            color: var(--text-secondary);
            font-size: 1.1rem;
            margin-bottom: 2rem;
            line-height: 1.5;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .header-content {
                padding: 0.875rem 1rem;
            }

            .main-container {
                padding: 5rem 1rem 2rem;
            }

            .form-wrapper {
                border-radius: var(--radius-lg);
            }

            .progress-bar {
                padding: 1.5rem;
            }

            .progress-title {
                font-size: 1.25rem;
            }

            .progress-steps {
                gap: 0.5rem;
            }

            .step-circle {
                width: 35px;
                height: 35px;
                font-size: 0.9rem;
            }

            .step-label {
                font-size: 0.7rem;
            }

            .form-content {
                padding: 2rem;
            }

            .form-title {
                font-size: 1.5rem;
            }

            .form-subtitle {
                font-size: 1rem;
            }

            .form-actions {
                flex-direction: column-reverse;
                gap: 0.75rem;
            }

            .btn {
                width: 100%;
            }
        }

        @media (max-width: 480px) {
            .progress-step .step-label {
                display: none;
            }

            .form-content {
                padding: 1.5rem;
            }

            .form-input {
                padding-left: 3rem;
                font-size: 16px; /* Prevent zoom on iOS */
            }

            .input-icon {
                left: 1rem;
            }

            .file-upload-area {
                padding: 2rem 1.5rem;
            }

            .upload-icon {
                width: 48px;
                height: 48px;
            }

            .btn {
                padding: 0.875rem 1.5rem;
                font-size: 0.95rem;
            }
        }
    </style>
</head>
<body>
    <div class="background-design">
        <div class="bg-gradient"></div>
        <div class="bg-shapes">
            <div class="shape"></div>
            <div class="shape"></div>
            <div class="shape"></div>
        </div>
    </div>

    <header class="header">
        <div class="header-content">
            <a href="#" class="brand">
                <div class="brand-icon">🌐</div>
                <span class="brand-text">VirtuHub</span>
            </a>
        </div>
    </header>

    <main class="main-container">
        <div class="form-wrapper">
            <!-- Progress Bar -->
            <div class="progress-bar">
                <div class="progress-content">
                    <h2 class="progress-title">Join Community</h2>
                    <div class="progress-steps">
                        <div class="progress-line">
                            <div class="progress-line-fill" id="progressFill"></div>
                        </div>
                        <div class="progress-step active" id="progressStep1">
                            <div class="step-circle">1</div>
                            <span class="step-label">Personal</span>
                        </div>
                        <div class="progress-step" id="progressStep2">
                            <div class="step-circle">2</div>
                            <span class="step-label">Contact</span>
                        </div>
                        <div class="progress-step" id="progressStep3">
                            <div class="step-circle">3</div>
                            <span class="step-label">Profile</span>
                        </div>
                        <div class="progress-step" id="progressStep4">
                            <div class="step-circle">4</div>
                            <span class="step-label">Work</span>
                        </div>
                        <div class="progress-step" id="progressStep5">
                            <div class="step-circle">5</div>
                            <span class="step-label">Role</span>
                        </div>
                        <div class="progress-step" id="progressStep6">
                            <div class="step-circle">6</div>
                            <span class="step-label">Reason</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Content -->
            <div class="form-content">
                <div class="form-header">
                    <h1 class="form-title">Application Form</h1>
                    <p class="form-subtitle">Tell us about yourself to join this community</p>
                </div>

                <form id="communityApproval" action="/community/<%=community._id%>/communityApproval" method="post" enctype="multipart/form-data">
                    <!-- Step 1: Personal Info -->
                    <div id="step1" class="form-step active">
                        <div class="form-group">
                            <label for="name" class="form-label">
                                Full Name
                                <span class="form-label-hint">(as you'd like to be known)</span>
                            </label>
                            <div class="input-wrapper">
                                <input type="text" id="name" name="name" class="form-input" placeholder="Enter your full name" required>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                            </div>
                            <div class="error-message" id="nameError"></div>
                        </div>

                        <div class="form-group">
                            <label for="age" class="form-label">
                                Age
                                <span class="form-label-hint">(must be 18 or older)</span>
                            </label>
                            <div class="input-wrapper">
                                <input type="number" id="age" name="age" class="form-input" placeholder="Enter your age" min="18" max="120" required>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a2 2 0 012-2h4a2 2 0 012 2v4m-6 9l6-6m0 0l6 6M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                            </div>
                            <div class="error-message" id="ageError"></div>
                        </div>
                    </div>

                    <!-- Step 2: Contact Info -->
                    <div id="step2" class="form-step">
                        <div class="form-group">
                            <label for="email" class="form-label">
                                Email Address
                                <span class="form-label-hint">(for communication)</span>
                            </label>
                            <div class="input-wrapper">
                                <input type="email" id="email" name="email" class="form-input" placeholder="Enter your email address" required>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                </svg>
                            </div>
                            <div class="error-message" id="emailError"></div>
                        </div>

                        <div class="form-group">
                            <label for="phone" class="form-label">
                                Phone Number
                                <span class="form-label-hint">(optional)</span>
                            </label>
                            <div class="input-wrapper">
                                <input type="tel" id="phone" name="phone" class="form-input" placeholder="Enter your phone number">
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                </svg>
                            </div>
                        </div>
                    </div>

                    <!-- Step 3: Profile -->
                    <div id="step3" class="form-step">
                        <div class="form-group">
                            <label for="profilePhoto" class="form-label">
                                Profile Photo
                                <span class="form-label-hint">(optional, max 5MB)</span>
                            </label>
                            <div class="file-upload-area" id="profilePhotoUpload">
                                <input type="file" class="file-input" id="profilePhoto" name="profilePhoto" accept="image/*">
                                <div class="upload-content">
                                    <svg class="upload-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    <h3 class="upload-title">Upload Profile Photo</h3>
                                    <p class="upload-subtitle">Drag & drop or click to browse</p>
                                </div>
                                <div class="file-info" id="profilePhotoInfo">
                                    <div class="file-name"></div>
                                    <div class="file-size"></div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="bio" class="form-label">
                                Short Bio
                                <span class="form-label-hint">(tell us about yourself)</span>
                            </label>
                            <div class="input-wrapper">
                                <textarea id="bio" name="bio" class="form-input" placeholder="Write a brief description about yourself..." maxlength="500"></textarea>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                            </div>
                            <div class="input-footer">
                                <div class="char-counter" id="bioCounter">0/500</div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 4: Work Info -->
                    <div id="step4" class="form-step">
                        <div class="form-group">
                            <label for="occupation" class="form-label">
                                Current Occupation
                                <span class="form-label-hint">(job title or profession)</span>
                            </label>
                            <div class="input-wrapper">
                                <input type="text" id="occupation" name="occupation" class="form-input" placeholder="e.g., Software Developer, Teacher, Student" required>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m8 6V8a2 2 0 00-2-2H10a2 2 0 00-2 2v4.01M21 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-2"></path>
                                </svg>
                            </div>
                            <div class="error-message" id="occupationError"></div>
                        </div>

                        <div class="form-group">
                            <label for="company" class="form-label">
                                Company/Organization
                                <span class="form-label-hint">(where you work or study)</span>
                            </label>
                            <div class="input-wrapper">
                                <input type="text" id="company" name="company" class="form-input" placeholder="Enter company or organization name">
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                </svg>
                            </div>
                        </div>
                    </div>

                    <!-- Step 5: Role Interest -->
                    <div id="step5" class="form-step">
                        <div class="form-group">
                            <label for="desiredRole" class="form-label">
                                Desired Role in Community
                                <span class="form-label-hint">(how you'd like to contribute)</span>
                            </label>
                            <div class="input-wrapper">
                                <select id="desiredRole" name="desiredRole" class="form-input" required>
                                    <option value="">Select your preferred role...</option>
                                    <option value="member">Active Member</option>
                                    <option value="contributor">Content Contributor</option>
                                    <option value="mentor">Mentor</option>
                                    <option value="organizer">Event Organizer</option>
                                    <option value="moderator">Community Moderator</option>
                                    <option value="other">Other (specify below)</option>
                                </select>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                </svg>
                            </div>
                            <div class="error-message" id="desiredRoleError"></div>
                        </div>

                        <div class="form-group">
                            <label for="skills" class="form-label">
                                Skills & Expertise
                                <span class="form-label-hint">(what you can offer)</span>
                            </label>
                            <div class="input-wrapper">
                                <textarea id="skills" name="skills" class="form-input" placeholder="List your skills, expertise, or areas of knowledge..." maxlength="300"></textarea>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                </svg>
                            </div>
                            <div class="input-footer">
                                <div class="char-counter" id="skillsCounter">0/300</div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 6: Reason for Joining -->
                    <div id="step6" class="form-step">
                        <div class="form-group">
                            <label for="reason" class="form-label">
                                Why do you want to join this community?
                                <span class="form-label-hint">(help us understand your motivation)</span>
                            </label>
                            <div class="input-wrapper">
                                <textarea id="reason" name="reason" class="form-input" placeholder="Tell us why you're interested in joining and what you hope to achieve..." maxlength="500" required></textarea>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <div class="input-footer">
                                <div class="char-counter" id="reasonCounter">0/500</div>
                            </div>
                            <div class="error-message" id="reasonError"></div>
                        </div>

                        <div class="form-group">
                            <label for="references" class="form-label">
                                References
                                <span class="form-label-hint">(optional - any community members who can vouch for you)</span>
                            </label>
                            <div class="input-wrapper">
                                <textarea id="references" name="references" class="form-input" placeholder="List any community members who know you or can provide a reference..." maxlength="200"></textarea>
                                <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                                </svg>
                            </div>
                            <div class="input-footer">
                                <div class="char-counter" id="referencesCounter">0/200</div>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" id="prevBtn" style="display: none;">
                            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                            Previous
                        </button>
                        <button type="button" class="btn btn-primary" id="nextBtn">
                            Next
                            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                            <div class="loading-spinner"></div>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <!-- Success Overlay -->
    <div class="success-overlay" id="successOverlay">
        <div class="success-card">
            <div class="success-icon-wrapper">
                <svg width="40" height="40" fill="currentColor" viewBox="0 0 24 24" style="color: white;">
                    <path d="M9 16.17L5.53 12.7a.996.996 0 10-1.41 1.41L9 19l12-12a.996.996 0 10-1.41-1.41L9 16.17z"/>
                </svg>
            </div>
            <h2 class="success-title">Application Submitted!</h2>
            <p class="success-message">
                Thank you for your interest in joining our community. We'll review your application and get back to you within 3-5 business days.
            </p>
            <button type="button" class="btn btn-primary" onclick="window.location.href='#'">
                Return to Community
            </button>
        </div>
    </div>

    <script>
        class MultiStepForm {
            constructor() {
                this.currentStep = 1;
                this.totalSteps = 6;
                this.form = document.getElementById('communityApproval');
                this.nextBtn = document.getElementById('nextBtn');
                this.prevBtn = document.getElementById('prevBtn');
                this.progressFill = document.getElementById('progressFill');
                
                this.init();
            }

            init() {
                this.bindEvents();
                this.updateProgress();
                this.setupFileUpload();
                this.setupCharCounters();
            }

            bindEvents() {
                this.nextBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    this.nextStep();
                });
                
                this.prevBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    this.prevStep();
                });
                
                // Form validation on input
                this.form.addEventListener('input', (e) => this.validateField(e.target));
                this.form.addEventListener('change', (e) => this.validateField(e.target));
            }

            nextStep() {
                if (this.validateCurrentStep()) {
                    if (this.currentStep < this.totalSteps) {
                        this.currentStep++;
                        this.showStep();
                        this.scrollToTop();
                    } else {
                        this.submitForm();
                    }
                }
            }

            prevStep() {
                if (this.currentStep > 1) {
                    this.currentStep--;
                    this.showStep();
                    this.scrollToTop();
                }
            }

            showStep() {
                // Hide all steps
                document.querySelectorAll('.form-step').forEach(step => {
                    step.classList.remove('active');
                });
                
                // Show current step
                const currentStepEl = document.getElementById(`step${this.currentStep}`);
                if (currentStepEl) {
                    currentStepEl.classList.add('active');
                }
                
                // Update progress
                this.updateProgress();
                this.updateButtons();
            }

            updateProgress() {
                const progressPercentage = ((this.currentStep - 1) / (this.totalSteps - 1)) * 100;
                this.progressFill.style.width = `${progressPercentage}%`;
                
                // Update step indicators
                for (let i = 1; i <= this.totalSteps; i++) {
                    const step = document.getElementById(`progressStep${i}`);
                    if (step) {
                        step.classList.remove('active', 'completed');
                        
                        if (i < this.currentStep) {
                            step.classList.add('completed');
                        } else if (i === this.currentStep) {
                            step.classList.add('active');
                        }
                    }
                }
            }

            updateButtons() {
                // Previous button
                this.prevBtn.style.display = this.currentStep === 1 ? 'none' : 'inline-flex';
                
                // Next/Submit button
                if (this.currentStep === this.totalSteps) {
                    this.nextBtn.innerHTML = `
                        Submit Application
                        <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                        </svg>
                        <div class="loading-spinner"></div>
                    `;
                } else {
                    this.nextBtn.innerHTML = `
                        Next
                        <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                        <div class="loading-spinner"></div>
                    `;
                }
            }

            validateCurrentStep() {
                const currentStepEl = document.getElementById(`step${this.currentStep}`);
                if (!currentStepEl) return false;
                
                const requiredFields = currentStepEl.querySelectorAll('[required]');
                let isValid = true;

                requiredFields.forEach(field => {
                    if (!this.validateField(field)) {
                        isValid = false;
                    }
                });

                return isValid;
            }

            validateField(field) {
                if (!field) return true;
                
                const value = field.value ? field.value.trim() : '';
                const fieldName = field.name || field.id;
                let isValid = true;
                let errorMessage = '';

                // Clear previous error state
                field.classList.remove('error');
                const errorEl = document.getElementById(`${fieldName}Error`);
                if (errorEl) {
                    errorEl.classList.remove('show');
                    errorEl.textContent = '';
                }

                // Required field validation
                if (field.hasAttribute('required') && !value) {
                    isValid = false;
                    errorMessage = 'This field is required';
                }

                // Specific field validations
                if (value) {
                    switch (fieldName) {
                        case 'name':
                            if (value.length < 2) {
                                isValid = false;
                                errorMessage = 'Name must be at least 2 characters long';
                            }
                            break;
                        case 'age':
                            const age = parseInt(value);
                            if (isNaN(age) || age < 18 || age > 120) {
                                isValid = false;
                                errorMessage = 'Age must be between 18 and 120';
                            }
                            break;
                        case 'email':
                            const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                            if (!emailPattern.test(value)) {
                                isValid = false;
                                errorMessage = 'Please enter a valid email address';
                            }
                            break;
                        case 'occupation':
                            if (value.length < 2) {
                                isValid = false;
                                errorMessage = 'Please enter a valid occupation';
                            }
                            break;
                        case 'desiredRole':
                            if (field.hasAttribute('required') && !value) {
                                isValid = false;
                                errorMessage = 'Please select a desired role';
                            }
                            break;
                        case 'reason':
                            if (value.length < 20) {
                                isValid = false;
                                errorMessage = 'Please provide at least 20 characters explaining your reason';
                            }
                            break;
                    }
                }

                // Show error if invalid
                if (!isValid && errorEl) {
                    field.classList.add('error');
                    errorEl.textContent = errorMessage;
                    errorEl.classList.add('show');
                }

                return isValid;
            }

            setupFileUpload() {
                const fileInput = document.getElementById('profilePhoto');
                const uploadArea = document.getElementById('profilePhotoUpload');
                const fileInfo = document.getElementById('profilePhotoInfo');

                if (!fileInput || !uploadArea || !fileInfo) return;

                fileInput.addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    this.handleFileUpload(file, uploadArea, fileInfo);
                });

                // Drag and drop functionality
                uploadArea.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    uploadArea.style.borderColor = 'var(--primary-color)';
                });

                uploadArea.addEventListener('dragleave', (e) => {
                    e.preventDefault();
                    uploadArea.style.borderColor = 'var(--hover-bg)';
                });

                uploadArea.addEventListener('drop', (e) => {
                    e.preventDefault();
                    uploadArea.style.borderColor = 'var(--hover-bg)';
                    const files = e.dataTransfer.files;
                    if (files.length > 0) {
                        fileInput.files = files;
                        this.handleFileUpload(files[0], uploadArea, fileInfo);
                    }
                });
            }

            handleFileUpload(file, uploadArea, fileInfo) {
                if (!file) return;

                // Reset states
                uploadArea.classList.remove('has-file', 'has-error');
                fileInfo.classList.remove('show');

                // Validate file size (5MB max)
                if (file.size > 5 * 1024 * 1024) {
                    uploadArea.classList.add('has-error');
                    alert('File size must be less than 5MB');
                    return;
                }

                // Validate file type
                if (!file.type.startsWith('image/')) {
                    uploadArea.classList.add('has-error');
                    alert('Please select an image file');
                    return;
                }

                // Show file info
                uploadArea.classList.add('has-file');
                fileInfo.classList.add('show');
                
                const fileNameEl = fileInfo.querySelector('.file-name');
                const fileSizeEl = fileInfo.querySelector('.file-size');
                
                if (fileNameEl && fileSizeEl) {
                    fileNameEl.textContent = file.name;
                    fileSizeEl.textContent = this.formatFileSize(file.size);
                }
            }

            setupCharCounters() {
                const textareas = [
                    { id: 'bio', counter: 'bioCounter', max: 500 },
                    { id: 'skills', counter: 'skillsCounter', max: 300 },
                    { id: 'reason', counter: 'reasonCounter', max: 500 },
                    { id: 'references', counter: 'referencesCounter', max: 200 }
                ];

                textareas.forEach(({ id, counter, max }) => {
                    const textarea = document.getElementById(id);
                    const counterEl = document.getElementById(counter);
                    
                    if (textarea && counterEl) {
                        textarea.addEventListener('input', (e) => {
                            const length = e.target.value.length;
                            counterEl.textContent = `${length}/${max}`;
                            
                            if (length > max * 0.9) {
                                counterEl.classList.add('warning');
                            } else {
                                counterEl.classList.remove('warning');
                            }
                        });
                    }
                });
            }

            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            scrollToTop() {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            }

            async submitForm() {
                // Show loading state
                this.nextBtn.disabled = true;
                const spinner = this.nextBtn.querySelector('.loading-spinner');
                const icon = this.nextBtn.querySelector('.btn-icon');
           
                if (spinner && icon) {
                    spinner.style.display = 'block';
                    icon.style.display = 'none';
                }

                try {
                    // Create FormData object to handle file uploads
                    const formData = new FormData(this.form);
                    
                    // Submit the form to the server
                    const response = await fetch(this.form.action, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        // Show success overlay
                        const successOverlay = document.getElementById('successOverlay');
                        if (successOverlay) {
                            successOverlay.style.display = 'flex';
                        }
                    } else {
                        throw new Error('Server error: ' + response.status);
                    }
               
                } catch (error) {
                    console.error('Error submitting form:', error);
                    alert('There was an error submitting your application. Please try again.');
                } finally {
                    // Reset loading state
                    this.nextBtn.disabled = false;
                    if (spinner && icon) {
                        spinner.style.display = 'none';
                        icon.style.display = 'block';
                    }
                }
            }
        }

        // Initialize form when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            new MultiStepForm();
        });

        // Close success overlay when clicking outside
        document.addEventListener('click', (e) => {
            const successOverlay = document.getElementById('successOverlay');
            if (e.target === successOverlay) {
                successOverlay.style.display = 'none';
            }
        });

        // Handle escape key to close success overlay
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                const successOverlay = document.getElementById('successOverlay');
                if (successOverlay && successOverlay.style.display === 'flex') {
                    successOverlay.style.display = 'none';
                }
            }
        });
    </script>
</body>
</html>